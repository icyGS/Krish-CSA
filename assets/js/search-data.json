{
  
    
        "post0": {
            "title": "College Board Study Guide",
            "content": "Unit 1: Primitives . This unit is a very important unit to all of Java. Without primitives, literally nothing could be calculated or produced, and the whole purpose of coding would be gone. While it may be the simplest of the Units, it one hundred percent is the most important. It is the backbone of this entire course, so we should make sure that our understanding of the language is as high as possible. . You can find my blog post about it here! . Unit 2: Using Objects . A very important part of Java is known as Object Oriented Programming. In this unit, we further explored this concept. This allows Java to be a very powerful language for backend development especially, with many uses and whatnot. OOP allows Java to be very good at things like robotics as a programming language for robots. . You can find my blog post about it here! . Unit 3: Booleans and If statements . Another powerful tool in Java that can be found in most code segments. If statements can be used for many purposes, from own functionality to error detection, they are great. Booleans are basically a true or false, no in between. This allows them to be useful for if statements (hence why we learn them together) . You can find my blog post about it here! . Unit 4: Iteration . Iteration is very useful especially with loops. In this unit, iteration is covered along with loops. This can be used in arrays and other things that require iteration to work more efficiently. This condenses possible hundreds or thousands of lines of code into a mere few, as it is a code segment that repeats over and over again. Here, runtime and whatnot is also described as it is relevant to this topic. . You can find my blog post about it here . Unit 5: Classes . Classes make up Java code. You can see them everywhere as everything is contained within a class. Without classes there would be no Java. Fortunately we were the people that made a presentation on Classes so we have a good amount of experience with it. In our presentation, all of the vocab was covered (you&#39;re welcome people) so it&#39;s really easy for everyone to find it in a centralized location. . You can find my blog post about it here . Unit 6: Arrays . Arrays can be used for so many uses of storing data, although there are better options to be honest as 2d arrays and array lists also exist so they are not super important. Learning the syntax was kinda hard though so this was helpful. . You can find my blog post about it here . Unit 7 ArrayLists . Array lists are super useful because of the fact that you can change the size of the arraylist, meaning that they are much more useful than Arrays (although sometimes arrays are more useful from time to time). They have different functions so more learning was helpful. . You can find my blog post about it here . Unit 8 2D Arrays . 2D arrays are really cool due to the fact that they have 2 dimensions and you can store data in each row and column, meaning that it is easier to make things like ASCII art and etc. Traversing is the main part of this in the AP exam so it is not that bad of a topic. . You can find my blog post about it here . Unit 9 Inheritance . Inheritance is where a class contains attributes from a parent class, meaning that it can use all of these and extend whatever it needs to ontop of that. Its like a kid and a parent. . You can fine my blog post about it here . Unit 10 Recursion . Recursion is where a method calls itself over and over again until a certain result is achieved. We can see this in factorials and also the fibonacci sequence. . You can find my blog post about it here .",
            "url": "https://icygs.github.io/Krish-CSA/college%20board/2023/06/10/CollegeBoard-Study-Guide.html",
            "relUrl": "/college%20board/2023/06/10/CollegeBoard-Study-Guide.html",
            "date": " • Jun 10, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "2015 Practice MC",
            "content": ". What I learned . Overall got a 34/39 on the mc | Topics I got wrong: 1.B: Determine code that would be used to complete code segments. | 2.C: Determine the result or output based on the statement execution order in a code segment containing method calls. | 2.D: Determine the number of times a code segment will execute. | | . | Overall, it seems that all of the questions that I missed had to do with trouble shooting code and spotting errors | In the future, I should work on getting better at spotting errors in code and seeing what is causing a specific error | . Q3: Consider the following definition. Which of the following code segments produces the output 123456 ? . Notes: I said that the answer was E but it was A | I should’ve wrote out all of the outputs on paper | I was unsure on the answer and moved on because of time | . Q6: Consider the following two classes. . What is printed as a result of executing the following code segment? . Because the algorithm uses a for-each loop to traverse the rows, the row index is not being stored. | I chose that “The row index of an element with the largest value in the two-dimensional array” | Answer was “The column index of an element with the largest value in the two-dimensional array” | . Q7: Consider the following method. What is printed as a result of executing the following code segment? . I said that the answer was “00000” | The answer was “00100” | What I said would be the result for the method call combine(“00000”, “11111”), for example. | . Q28: Consider the code segment below. int a = 1988; int b = 1990; String claim = “ that the world’s athletes “ + “competed in Olympic Games in “; String s = “It is “ + true + claim + a + “ but “ + false + claim + b + “.”; System.out.println(s); What, if anything, is printed when the code segment is executed? . I sad that the answer was “It is trueclaima but falseclaimb.” | The answer was “It is true that the world’s athletes competed in Olympic Games in 1988 but false that the world’s athletes competed in Olympic Games in 1990.” | I missed the fact that the values were from the concatenation and not the variables themselves | .",
            "url": "https://icygs.github.io/Krish-CSA/college%20board/2023/03/13/2015-Practice-MC.html",
            "relUrl": "/college%20board/2023/03/13/2015-Practice-MC.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Data Structures",
            "content": "Methods and Control Structures . Methods . A method in Java is a block of code that, when called, performs specific actions mentioned in it. | For instance, if you have written instructions to draw a circle in the method, it will do that task. | You can insert values or parameters into methods, and they will only be executed when called. | A method is similar to a function in other programming languages such as python | . Control Structures . Control Structures can be considered as the building blocks of computer programs. | They are commands that enable a program to “take decisions”, following one path or another. | A program is usually not limited to a linear sequence of instructions since during its process it may bifurcate, repeat code or bypass sections. | . APCSA FRQ 2017 Methods and Control Structures . https://apcentral.collegeboard.org/media/pdf/ap-computer-science-a-frq-2017.pdf | . Exploring teacher code . Diverse Array . Matric . Contains methods and control structures | Multiple methods that allow stuff to happen | Multiple control structures . Loops For | While | . | If statements | . | Fits within data types because contains arrays which is a data type . | Takeaway: most code segments no matter what they are on have to do with methods and control structures . | . Random . Math.random | Gives value between 0 and 1 | To get a random value between 7 and 9, double a Math.random value and add 7 to it | . Do nothing by value . You&#39;re basically changing a variable but the variable doesn&#39;t actually change because it is changing the subvalue and not the actual value | Changing a variable only happens at a large scale Can&#39;t do it locally | . | . Int by Reference . The int changes its value even though you are doing it locally | Basically says theres a way to get around the fact that you cant edit variables locally | . Menu . Try, Catch, Runnable are used to control program execution | . package com.nighthawk.hacks.methodsDataTypes; import java.util.HashMap; import java.util.Map; import java.util.Scanner; /** * Menu: custom implementation * @author John Mortensen * * Uses String to contain Title for an Option * Uses Runnable to store Class-Method to be run when Title is selected */ // The Menu Class has a HashMap of Menu Rows public class Menu { // Format // Key {0, 1, 2, ...} created based on order of input menu // Value {MenuRow0, MenuRow1, MenuRow2,...} each corresponds to key // MenuRow {&lt;Exit,Noop&gt;, Option1, Option2, ...} Map&lt;Integer, MenuRow&gt; menu = new HashMap&lt;&gt;(); /** * Constructor for Menu, * * @param rows, is the row data for menu. */ public Menu(MenuRow[] rows) { int i = 0; for (MenuRow row : rows) { // Build HashMap for lookup convenience menu.put(i++, new MenuRow(row.getTitle(), row.getAction())); } } /** * Get Row from Menu, * * @param i, HashMap key (k) * * @return MenuRow, the selected menu */ public MenuRow get(int i) { return menu.get(i); } /** * Iterate through and print rows in HashMap */ public void print() { for (Map.Entry&lt;Integer, MenuRow&gt; pair : menu.entrySet()) { System.out.println(pair.getKey() + &quot; ==&gt; &quot; + pair.getValue().getTitle()); } } /** * To test run Driver */ public static void main(String[] args) { Driver.main(args); } } // The MenuRow Class has title and action for individual line item in menu class MenuRow { String title; // menu item title Runnable action; // menu item action, using Runnable /** * Constructor for MenuRow, * * @param title, is the description of the menu item * @param action, is the run-able action for the menu item */ public MenuRow(String title, Runnable action) { this.title = title; this.action = action; } /** * Getters */ public String getTitle() { return this.title; } public Runnable getAction() { return this.action; } /** * Runs the action using Runnable (.run) */ public void run() { action.run(); } } // The Main Class illustrates initializing and using Menu with Runnable action class Driver { /** * Menu Control Example */ public static void main(String[] args) { // Row initialize MenuRow[] rows = new MenuRow[]{ // lambda style, () -&gt; to point to Class.Method new MenuRow(&quot;Exit&quot;, () -&gt; main(null)), new MenuRow(&quot;Do Nothing&quot;, () -&gt; DoNothingByValue.main(null)), new MenuRow(&quot;Swap if Hi-Low&quot;, () -&gt; IntByReference.main(null)), new MenuRow(&quot;Matrix Reverse&quot;, () -&gt; Matrix.main(null)), new MenuRow(&quot;Diverse Array&quot;, () -&gt; Matrix.main(null)), new MenuRow(&quot;Random Squirrels&quot;, () -&gt; Number.main(null)) }; // Menu construction Menu menu = new Menu(rows); // Run menu forever, exit condition contained in loop while (true) { System.out.println(&quot;Hacks Menu:&quot;); // print rows menu.print(); // Scan for input try { Scanner scan = new Scanner(System.in); int selection = scan.nextInt(); // menu action try { MenuRow row = menu.get(selection); // stop menu if (row.getTitle().equals(&quot;Exit&quot;)) { if (scan != null) scan.close(); // scanner resource requires release return; } // run option row.run(); } catch (Exception e) { System.out.printf(&quot;Invalid selection %d n&quot;, selection); } } catch (Exception e) { System.out.println(&quot;Not a number&quot;); } } } . Method and Control structures . There are three kinds of control structures: Conditional Branches, which we use for choosing between two or more paths. There are three types in Java: if/else/else if, ternary operator and switch. Loops that are used to iterate through multiple values/objects and repeatedly run specific code blocks. | MenuRow and Runnable are data types and also control structures | .",
            "url": "https://icygs.github.io/Krish-CSA/college%20board/2023/03/10/Data-Structures.html",
            "relUrl": "/college%20board/2023/03/10/Data-Structures.html",
            "date": " • Mar 10, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Tech Talk 1",
            "content": "Extra Credit Seed Opportunity . Write a sample binary addition 1 + 1 = 10 | Have Java Code cell on screen at start of lecture | Don&#39;t tell anyone | . import java.util.Scanner; public class BinaryAdding { private static Scanner scanner; public static void main(String[] args) { scanner = new Scanner(System.in); System.out.println(&quot;Enter first and second numbers&quot;); String b1 = scanner.nextLine(); System.out.println(b1); String b2 = scanner.nextLine(); System.out.println(b2); int num1 = Integer.parseInt(b1, 2); int num2 = Integer.parseInt(b2, 2); int output = num1 + num2; System.out.print(&quot; nThe Sum = &quot;); System.out.print(Integer.toBinaryString(output)); } } BinaryAdding.main(null); . Enter The First and Second Numbers = 1 1 The Sum = 10 .",
            "url": "https://icygs.github.io/Krish-CSA/college%20board/2023/03/06/Tech-Talk-1.html",
            "relUrl": "/college%20board/2023/03/06/Tech-Talk-1.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "52 Question Multiple Choice Practice",
            "content": ". What I learned . Overall got a 44/52 on the mc | Topics I got wrong: 2.A: Apply the meaning of specific operators. | 2.B: Determine the result or output based on statement execution order in a code segment without method calls (other than output). | 2.C: Determine the result or output based on the statement execution order in a code segment containing method calls. | 5.A: Describe the behavior of a given segment of program code. | | . | Overall, it seems that all of the questions that I missed had to do with trouble shooting code and spotting errors | In the future, I should work on getting better at spotting errors in code and seeing what is causing a specific error | . Q2: Assume that mat has been declared as a 4×4 array of integers and has been initialized to contain all 1s. Consider the following code segment. . int n = mat.length; for (int j = 1; j &lt; n; j++) { for (int k = 1; k &lt; n; k++) { mat[j][k] = mat[j - 1][k] + mat[j][k - 1]; } } What is the value of mat[2][2] after the code segment has completed execution? . Notes: I said that the answer was 4 but it was actually 6 | I should’ve wrote out all of the outputs on paper | I was unsure on the answer and moved on because of time | . Q6: . Because the algorithm uses a for-each loop to traverse the rows, the row index is not being stored. | I chose that “The row index of an element with the largest value in the two-dimensional array” | Answer was “The column index of an element with the largest value in the two-dimensional array” | . Q7: Consider the following method. . /** Precondition: Strings one and two have the same length. */ public static String combine(String one, String two) { String res = &quot;&quot;; for (int k = 0; k &lt; one.length(); k++) { if (one.substring(k, k + 1).equals(two.substring(k, k + 1))) { res += one.substring(k, k + 1); } else { res += &quot;0&quot;; } } return res; } . What is returned as a result of the call combine(“10110”, “01100”) ? . I said that the answer was “00000” | The answer was “00100” | What I said would be the result for the method call combine(“00000”, “11111”), for example. | . Q29: Consider the code segment below. int a = 1988; int b = 1990; String claim = “ that the world’s athletes “ + “competed in Olympic Games in “; String s = “It is “ + true + claim + a + “ but “ + false + claim + b + “.”; System.out.println(s); What, if anything, is printed when the code segment is executed? . I sad that the answer was “It is trueclaima but falseclaimb.” | The answer was “It is true that the world’s athletes competed in Olympic Games in 1988 but false that the world’s athletes competed in Olympic Games in 1990.” | I missed the fact that the values were from the concatenation and not the variables themselves | .",
            "url": "https://icygs.github.io/Krish-CSA/college%20board/2023/01/30/MC-52-Questions.html",
            "relUrl": "/college%20board/2023/01/30/MC-52-Questions.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "66 Question Multiple Choice Practice",
            "content": ". What I learned . Overall got a 53/66 on the mc | Topics I got wrong: 4.A: Use test-cases to find errors or validate results. | 4.B: Identify errors in program code. | 4.C: Determine if two or more code segments yield equivalent results. | . | Overall, it seems that all of the questions that I missed had to do with trouble shooting code and spotting errors | In the future, I should work on getting better at spotting errors in code and seeing what is causing a specific error | . Questions . Q12: Assume that x and y have been declared and initialized with int values. Consider the following Java expression (y &gt; 1000)||(x &gt; 1000 &amp;&amp; x &lt; 1500&gt;) Which of the following is equivalent to the expression given above? . I chose (y &gt; 10000 | | x &gt; 1000) | | (y &gt; 10000 | | x &lt; 1500) but the answer was (y &gt; 10000 | | x &gt; 1000) &amp;&amp; (y &gt; 10000 | | x &lt; 1500) | Notes: I approached this problem by trying to plug in values for x and y, but it seems that I messed up somewhere | Looking back, the answer was obvious as an or statement between the two expressions doesn’t quite work out | . | . Q13: Assume that x and y are boolean variables and have been properly initialized. (x || y) &amp;&amp; x Which of the following always evaluates to the same value as the expression above? . I chose x &amp;&amp; y but the answer was x | Notes: If x or y and x, the answer will always depends on x, meaning that the output should just be x | Once again, simple mistake | . | . Q15: Consider the following method, which is intended to return true if at least one of the three strings s1, s2, or s3 contains the substring “art”. Otherwise, the method should return false. . public static boolean containsArt{ String all = s1 + s2 + s3; return (all.indexOf(&quot;art&quot;) != 1) } . I said the answer was containsArt (&quot;matriculate&quot;, &quot;carat&quot;, &quot;arbitrary&quot;) but the answer was containsArt (&quot;rattrap&quot;, &quot;similar&quot;, &quot;today&quot;) | Notes: | I completely guessed on this question because at the time, I didn’t see where a potential flaw in the program was | Now that I’m looking back at the question, I see that adding up all of the strings makes anything that was seperate in the 3 strings together, meaning that if art was formed when strings were added together, that is an issue, which it seems to be in the correct answer! | . Q16: Consider the following method, which is intended to return the number of columns in the two-dimensional array arr for which the sum of the elements in the column is greater than the parameter val. . public int countCols(int[][] arr, int val){ int count = 0; for (int col = 0; col &lt; arr[0].length; col++) // Line 5 { int sum = 0; for (int[] row : col) // Line 8 { sum += row[col]; // Line 10 } if (sum &gt; val) { count++; } } return count; } The countCols method does not work as intended. Which of the following changes should be made so the method works as intended? . I said that Line 10 should be changed to sum += arr[row][col]; but in reality, the answer was Line 8 should be changed to for (int[] row : arr) | Notes: There was no issue in line 10 if we initially just the for loop and make it into a special for loop! | . | . Q22: Consider the following method, count, which is intended to traverse all the elements in the two-dimensional (2D) String array things and return the total number of elements that contain at least one “a”. . Notes: | The count doesnt include the last element in the array so if there is an a at the end, it will not function properly | . Q29: For which of the following values of num does the code segment not work as intended? . Since the array only goes to the 2nd to last term, it will not get the last term, | 8 is the answer, not 7 as 7 is literally the first value | Notes: Make sure to look out for the first and last terms of an array when doing error problems | Common theme that the error is in the first or last entry in the array | . | . Q35: . D produces the same things because it has the same indexes but just goes backwards | Notes: B is definitely wrong because it literally starts and ends at different indexes | . | . Q38: . Only 2 has the same behavior | Should’ve got this right, very easy question that only requires plugging in values into both and seeing if they are equal | . Q39: . 2000 was a leap year but 1900 was not | I simply mixed up my leap year rules (not a code issue, literally a skill issue) | . Q40: . First need to check if the initial num of vals is 0 because if so, you would just return whats already there | C is unnecessary to the code | . Q53: . It is very necessary to initialize the value of the total to be 1 initially so that the code works as intended, it isn’t needed that the while loops runs for x &lt;= n | . Takeaways . I need to focus on making sure that when I plug in different scenarios, I am writing down outputs Consider doing a truth table like I learned in Discrete Math | . | Look at first and last indexes for errors in error questions | Make sure that when matching, the output, as well as the input, are identical to one another! | .",
            "url": "https://icygs.github.io/Krish-CSA/college%20board/2023/01/22/MC-66-Questions.html",
            "relUrl": "/college%20board/2023/01/22/MC-66-Questions.html",
            "date": " • Jan 22, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Unit 10 Recursion",
            "content": "Recursion . Recursive method Method that calls itself | . | Contains at least one base case that halts recursion | Each recursive call has own local vars | Parameters value take progress of recursive process ## Example | . public static void simplerRecur(int n) { System.out.println(n); if (n &gt; 2) simplerRecur(n-1); System.out.println(n); } simplerRecur(4); . 4 3 2 2 3 4 . Double Recursion Example . public int dblRecur(int n) { if (n &gt; 0) return n + dblRecur(n/2) + dblRecur(n/3); return 0; } dblRecur(5); . 9 . Binary Search . Splitting sorted list into 2 bounds ## Example | . public class recursion{ public static int recursionBinarySearch(int[] array, int first, int last, int target){ int midpoint; //if the first number is greater than the last, the target number is not in the list if (first &gt; last){ System.out.println(-1); return -1; } else{ midpoint = (first+last)/2; //take the upper bound if number is greater than midpoint if (array[midpoint] &lt; target){ return recursionBinarySearch(array, midpoint+1, last, target); } // take the lower bound if the number is lesser than midpoint if (array[midpoint] &gt; target){ return recursionBinarySearch(array, first,midpoint-1, target); } System.out.println(&quot;index of target: &quot; + midpoint); return midpoint; } } public static void main(String[] args){ // test array in main int[] test_array = new int[]{ 0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40 }; recursion.recursionBinarySearch(test_array, 0, test_array.length, 24); } } recursion.main(null); . index of target: 12 . Merge Sort . Sorts array lists | Divide and conquers | Copies original elements in a temporary array and then merge sorts both sides of the array list and then merges both sides together | . Recursion Tree . Way to visualize the call of a recursive sequence Look at calls | Work from top to bottom | . | .",
            "url": "https://icygs.github.io/Krish-CSA/college%20board/2022/12/13/Unit-10.html",
            "relUrl": "/college%20board/2022/12/13/Unit-10.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Comp Sci Technical Business Panel",
            "content": "Kathyleen Beveridge . Born in vietnam | Came here in 1980 | Lived in bay area | Lived in spain for a bit | Moved to San Diego in 2004 | Received finance degree from SCU | MBA from USC | Stock broker from 95-96 Not for her, inflection in her career | Switched career to high tech | . | Thermo Fisher currently | HP Inc: Create technology that makes life better for everyone, every where | Qualcomm: Inventing the tech the world loves | Thermo Fisher Scientific: Enable customers to make the world cleaner and safer | Likes to work at companies that help the people Doing something that people want | . | . Why high tech? . Service sold is helping other people | Macro, or global, impact on the world | Generation changing | A billion people impacted by qualcomm every day | 125,000 employees at ThermoFisher | Over 42 Billion dollar revenue | Can take a concept and make it happen | . Kris Porter . Software engineer, SRE, DevOps engineer | Livermore HS | UCLA for Electrical Engineering | First compsci class was in 2nd quarter at UCLA Knew nothing and failed | Retook and got a C | Ended up being his career | . | Research Center for embedded networked sensors Now known as IOT (internet of things) | Learned Linux here | . | . | Stock market crashed when graduated so nobody hired | Startup 2010 email marketing operation Starting to do devops stuff | . | Worked for NBC Universal streaming media infrastructure | Moved to San Diego | Forced Mort to higher him | Started working at twitter around 2 years ago | . Projects . Streaming media infrastructure | Analytics Infrastructure projects | Twitter projects | New DataCenter deployment | . Takeaways . The tech industry is very large and has many different components to every company. If everyone in the company just codes, there’s no way that the company can actually function because there has to be someone who’s managing these people and actually telling them what is needed.This panel also gave me insight on how dreams can actually be a reality. These companies all around have so many people working to make the future a better place. It also made me realize that whatever I do should be for the good of the people because both of the speakers today only worked at companies that benefitted the people. It show’s that high tech is a really good field because it directly impacts people in their daily lives and without it, we would not be where we are today and our lives would be very different. This panel gave me insight on how the real world really operates and it shows that our CS class is actually very representative of how companies operate because of the many organizational strategies we use. .",
            "url": "https://icygs.github.io/Krish-CSA/final/2022/12/13/Comp-Sci-Technical-Business-Panel.html",
            "relUrl": "/final/2022/12/13/Comp-Sci-Technical-Business-Panel.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Unit 9",
            "content": "Inheritance . Create a super class and subclass Characteristics are extended to the subclass of the superclass | . | . public class A{ } public class B extends A{ } . Allows reusing the code and adding attributes | Subclass can become a superclass as well by extending the subclass | Super is used to call the superclass ## Overriding | @Override to indicate that you are overriding the superclass | Makes code more readable | Resets the name of the superclass | . Creating References using Inheritance Hierarchies . Lower levels of hierarchy inherit upper levels of hierarchy | . Polymorphism . Multiple classes that are related by inheritance | Object superclass contains equals() | toString() | . | . Homework . Create a world cup superclass with properties of your choice and subclasses for five teams which inherits those properties | Write a constructor for one of those subclasses | . public class SemiFinalTeam{ String jerseyColor; boolean semiFinals; boolean finals; public SemiFinalTeam(){ this.semiFinals = true; } public static void determineResults(SemiFinalTeam team1, SemiFinalTeam team2){ team1.SemiFinalResult(); team2.SemiFinalResult(); } public void SemiFinalResult(){ } public static void main(String[] args){ Argentina argentina = new Argentina(); Croatia croatia = new Croatia(); France france = new France(); Morocco morocco = new Morocco(); SemiFinalTeam.determineResults(croatia, argentina); SemiFinalTeam.determineResults(france, morocco); System.out.println(&quot;Argentina: &quot; + &quot;Jersey Color = &quot; + argentina.jerseyColor + &quot;, Semi Finals = &quot; + argentina.semiFinals + &quot;, Finals = &quot; + argentina.finals); System.out.println(&quot;Croatia: &quot; + &quot;Jersey Color = &quot; + croatia.jerseyColor + &quot;, Semi Finals = &quot; + croatia.semiFinals + &quot;, Finals = &quot; + croatia.finals); System.out.println(&quot;France: &quot; + &quot;Jersey Color = &quot; + france.jerseyColor + &quot;, Semi Finals = &quot; + france.semiFinals + &quot;, Finals = &quot; + france.finals); System.out.println(&quot;Morocco: &quot; + &quot;Jersey Color = &quot; + morocco.jerseyColor + &quot;, Semi Finals = &quot; + morocco.semiFinals + &quot;, Finals = &quot; + morocco.finals); } } public class Argentina extends SemiFinalTeam{ public Argentina(){ super(); super.jerseyColor = &quot;Blue + White&quot;; } public void SemiFinalResult(){ super.finals = true; } } public class Croatia extends SemiFinalTeam{ public Croatia(){ super(); super.jerseyColor = &quot;Red + White&quot;; } public void SemiFinalResult(){ super.finals = false; } } public class France extends SemiFinalTeam{ public France(){ super(); super.jerseyColor = &quot;Blue + White + Red&quot;; } public void SemiFinalResult(){ super.finals = true; } } public class Morocco extends SemiFinalTeam{ public Morocco(){ super(); super.jerseyColor = &quot;Red + Green&quot;; } public void SemiFinalResult(){ super.finals = true; } } SemiFinalTeam.main(null); . Argentina: Jersey Color = Blue + White, Semi Finals = true, Finals = true Croatia: Jersey Color = Red + White, Semi Finals = true, Finals = false France: Jersey Color = Blue + White + Red, Semi Finals = true, Finals = true Morocco: Jersey Color = Red + Green, Semi Finals = true, Finals = true .",
            "url": "https://icygs.github.io/Krish-CSA/college%20board/2022/12/12/Unit-9.html",
            "relUrl": "/college%20board/2022/12/12/Unit-9.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "FRQ 4",
            "content": "FRQ 4 (Collegeboard) . Only the collegeboard portions here, rest found on review ticket . import java.util.Random; public class LightBoard{ /** The lights on the board, where true represents on and false represents off. */ private boolean[][] lights; public LightBoard(int numRows, int numCols){ /** Constructs a LightBoard object having numRows rows and numCols columns. * Precondition: numRows &gt; 0, numCols &gt; 0 * Postcondition: each light has a 40% probability of being set to on. */ lights = new boolean[numRows][numCols]; for(int row = 0; row &lt; numRows; row++){ for(int col = 0; col &lt; numCols; col++){ if(Math.random() &lt; 0.4){ lights[row][col] = new Light(); } } } } /** Evaluates a light in row index row and column index col and returns a status * as described in part (b). * Precondition: row and col are valid indexes in lights. */ public boolean evaluateLight(int row, int col){ if (lights[row][col] == true) { int count = 0; for (int r = 0; r &lt; lights.length; r++){ if (lights[r][col] == true){ count++; } } if (count % 2 == 1){ return true; } else{ return false; } } else if (lights[row][col] == false) { int count = 0; for (int r = 0; r &lt; lights.length; r++){ if (lights[r][col] == true){ count++; } } if (count % 3 == 0) { return true; } else { return false; } } } } . def f(a, b, *c, d): return a + b + len(c) + d f(1, 2, 3, 4, d=5) . 10 .",
            "url": "https://icygs.github.io/Krish-CSA/college%20board/2022/12/11/FRQ-4.html",
            "relUrl": "/college%20board/2022/12/11/FRQ-4.html",
            "date": " • Dec 11, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Unit 8 2D Arrays",
            "content": "2d Array . Multi dimensional | 8-10% of the college board test | Traversing | How to call one | . Creating A 2D Array . Instead of one set of brackets, you have 2 sets of brackets | . Accessing and changing elements . Put indexes into the brackets 2 dimensional aspect | . | . Printing with for loop . Iterate through both i and j indexes with for loop | Can display values both backwards and upside down | . Homework . Create a class for 2D array learning. | Create a method too initialize a 2D array with arbitrary values | Create a method to reverse the 2D array and print out the values | Create a method that asks for the input of a position and it returns the corresponding value | Create a method that multiplies each value in a row and then adds all the products together | Create a new object to test out each method in the main function | . int[][] nums = {{1,2,3,4},{5,6,7,8},{9,10,11,12},{13,14,15,16}}; System.out.println(&quot;Reverse: &quot;); for(int i = nums.length-1; i &gt;= 0; i--){ for(int j = nums[i].length-1; j&gt;=0; j--){ System.out.println(nums[i][j]); } } . Reverse: 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 . import java.util.Scanner; public class Arrays{ int[][] nums; public Arrays(){ int[][] tmp = new int[3][3]; for (int i = 0; i &lt; tmp.length; i++){ for (int j = 0; j &lt; tmp[i].length; j++){ tmp[i][j] = (j+1) * (short) (Math.random()*11); } } this.nums = tmp; } public void print(){ for(int i = 0; i &lt; nums.length; i++){ for(int j = 0; j &lt; nums[i].length; j++){ System.out.print(nums[i][j] + &quot; &quot;); } System.out.println(); } } public void reverse(){ System.out.println(&quot; n nReverse: &quot;); for(int i = nums.length-1; i &gt;= 0; i--){ for(int j = nums[i].length-1; j&gt;=0; j--){ System.out.println(nums[i][j]); } } System.out.println(&quot; n&quot;); } public void getIndex(){ Scanner scanner = new Scanner(System.in); System.out.println(&quot;Input Row index: &quot;); int rowIndex = scanner.nextInt(); System.out.println(rowIndex); System.out.println(&quot;Input Column index: &quot;); int colIndex = scanner.nextInt(); System.out.println(colIndex); System.out.println(&quot;Output: &quot;); System.out.println(nums[rowIndex][colIndex]); } public void sumRowProducts(){ int sum = 0; System.out.println(&quot;Sum of the products of each value in each row: &quot;); for(int i = 0; i&lt;nums.length; i++){ int product = 1; for(int j = 0; j&lt;nums[i].length; j++){ product *= nums[i][j]; } sum += product; } System.out.println(sum); } public static void main(String[] args){ Arrays array = new Arrays(); array.print(); array.reverse(); array.getIndex(); array.sumRowProducts(); } } Arrays.main(null); . 4 16 27 0 0 12 3 8 12 Reverse: 12 8 3 12 0 0 27 16 4 Input Row index: 1 Input Column index: 1 Output: 0 Sum of the products of each value in each row: 2016 .",
            "url": "https://icygs.github.io/Krish-CSA/college%20board/2022/12/06/Unit-8-2D-Arrays.html",
            "relUrl": "/college%20board/2022/12/06/Unit-8-2D-Arrays.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Unit 7 Array Lists",
            "content": "Intro . A reference type | Array cannot be modified while ArrayLists can change their size | Can add, find size, clear, remove a index, get an index, or check if a list is empty | . Traversing ArrayLists . Using for loop | Using while loop | Enhanced for loop example | . | . for(String name:roster){} . Developing Algorithms with Array Lists . arraylist can change size so a lot more versatile than an array | . Searching . data: arrays, lists, queue, stack, etc | Loop with an if statement inside, going through each index and checking if a certain condition is met | Order matters occasionally | . Sorting . Sorting can work in either ascending or descending order | . Homework! . import java.util.ArrayList; import java.util.Collections; ArrayList&lt;String&gt; countries = new ArrayList&lt;&gt;(); countries.add(&quot;USA&quot;); countries.add(&quot;China&quot;); countries.add(&quot;Russia&quot;); countries.add(&quot;France&quot;); public void print(ArrayList&lt;String&gt; countries){ for (String str : countries){ System.out.println(str); } } Collections.sort(countries, Collections.reverseOrder()); System.out.println(&quot;Reverse: &quot;); print(countries); System.out.println(&quot;-&quot;); String tmp = countries.get(0); countries.set(0, countries.get(countries.size()-1)); countries.set(countries.size()-1, tmp); print(countries); . Reverse: USA Russia France China - China Russia France USA .",
            "url": "https://icygs.github.io/Krish-CSA/college%20board/2022/11/30/Unit-7-Array-Lists.html",
            "relUrl": "/college%20board/2022/11/30/Unit-7-Array-Lists.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Unit Five Lesson Grading",
            "content": "Students . 17/36 . Grade Complete Correct Organization . Braedan | 0.85/1 | 1/1 | 1/1 | 0.9/1 (all units in one blog) | . Aarav | 0.9/1 | 1/1 | 1/1 | 0.9/1 (blog was just hw, no notes) | . Aadya | 0.9/1 | 1/1 | 1/1 | 1/1sa | . Ellie | 0.9/1 | 1/1 | 1/1 | 0.9/1 (did not comment, showed in person) | . Shreya | 1/1 | 1/1 | 1+/1 | 1/1 (looks better than most, organized very neatly) | . Bria | 0.85/1 | 1/1 | 1/1 | 0.9/1 (had to search for her blog) | . Samaya | 0.9/1 | 1/1 | 1/1 | 1/1 | . Alice | 0.9/1 | 1/1 | 1/1 | 1/1 | . Sarayu | 0.9/1 | 1/1 | 1/1 | 1/1 | . Iris | 0.8/1 | 1/1 | 1/1 | 0.5/1 (Blank Link, but was able to find after searching) | . Serafina | 1/1 | 1/1 | 1+/1 (Solution isn&#39;t the exact same as the college board solution) | 1/1 | . Saumya | 0.85/1 | 1/1 | 1/1 | 0.8/1(Blank Link) fixed later | . Prisha | 0/1 | 0/1 | 0/1 | 0/1(Blank Link) | . Aarman | 0.8/1 | 1/1 | 1/1 | 0.5/1(Blank Link, but found in a separate comment than the team one) | . Aryan | 1/1 | 1/1 | 1/1 | 1+/1 (Organized very well, easy to find and thorough) | . Adi | 0.85/1 | 1/1 | 1/1 | 0.9/1 (All on one blog, harder to find because no direct links/ links at top of page) | . Aadit | 1/1 | 1+/1 (uniquely done compared to rest) | 1/1 | 1/1 | . Natalie | 0.9/1 | 0.9/1 . (Didn’t do the second part of the hw, but the effort put into the first part still earned you extra) . | 1+/1(done very well, better than the rest) | 1/1 | . Late Submissions (0.1 docked for late): . Students . 6/36 . Grade Complete Correct Organization . Daniel | 0.9/1 | 1+/1 | 1/1 | 1/1 (good organization, unique work) | . Iris | 0.9/1 | 1/1 | 1/1 | 0.9/1 (simple organization, nothing out of the ordinary) | . Yash | 0.8/1 | 1/1 | 1/1 | 1/1 | . Sophie | 0.9/1 | 1+/1 | 1/1 | 1/1 (unique code, and worked extra hard to implement) | . Aidan Wu | 0.8/1 | 1/1 | 1/1 | 1/1 | . Prisha B | 0.9/1 | 1/1+ | 1/1 | 1/1 (good example test code for 1a, comments were a nice touch to understanding code) | . Jun | 0.8/1 | 1/1 | 1/1 | 1/1 | . Dylan | 0.9/1 | 1+/1 | 1/1 | 1/1 (good organization, creative and unique code) | . Saumya | 0.85/1 | 1/1 | 1/1 | 1/1 (all units in a single blog, but simple organization. code differs from that of college board’s) | . Everitt | 0.8/1 | 1/1 | 1/1 | 0.8/1 (combined all units in one blog with no titles, could not find second part of hw) | . Tianbin | 0.9/1 | 1/1 | 1/1 | 1/1 | . Allie | 0.9/1 | 1/1 | 1/1 | 11 | .",
            "url": "https://icygs.github.io/Krish-CSA/2022/11/29/Unit-Five-Lesson-Grading.html",
            "relUrl": "/2022/11/29/Unit-Five-Lesson-Grading.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Trimester Review",
            "content": "This trimester hs been a very informative one. I have learned not only the skills of a coder but the skills of a worker. I have learned how people in the work force work and the things that go into working as a team. Project based learning has been a truly valuable experience, as I have learned that success is not possible without all members of a team being part of it. The scrum board was very useful as it allowed us to organize everyone and delegate tasks. As scrum master, I was in charge of managing everyone and delegating these tasks. Deciding who got what task was hard because it was hard to equally split up the work. Apart from this, there was a lot of Java that I learned throughout my time this trimester. While I have used Python in the past, Java was a very different experience. Learning Object Oriented Programming was a challenge as it was something that I was unfamiliar with, but I was still able to do it. The rest of the concepts like arrays and iteration and whatnot were not foreign to me, it was just mainly learning the syntax and whatnot for those. I took many notes throughout the lessons by fellow students in the class to fully learn Java. . Unit 1 Unit 2 Unit 3 Unit 4 Unit 6 . While we did learn these topics, there were still 4 more topics that we did not get taught to us yet. The topic that I found the most interesting was array lists. I found it quite fascinating how the image assignment was in particular. It was my favorite assignment of the trimester as I think that it truly brought out the creativity in people. I found it really interesting how people found so many different solutions for the same goal, showing how diverse coding really is. My least favorite assignment of the trimester on the other hand was the bash one. I for some reason could not wrap my head around it and still have some trouble doing so, so I should really focus on learning how bash works next tri. . Overall this trimester has been a very good one, which has taught me so much. Excited for another trimester of code code code! .",
            "url": "https://icygs.github.io/Krish-CSA/finals/2022/11/08/Trimester-Review.html",
            "relUrl": "/finals/2022/11/08/Trimester-Review.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Collegeboard Final MC",
            "content": ". What I learned . My overall score was a 34/40 on the MC | Skills that I got wrong: 1.B: Determine code that would be used to complete code segments. | 2.B: Determine the result or output based on statement execution order in a code segment without method calls (other than output). | 2.C: Determine the result or output based on the statement execution order in a code segment containing method calls. | 4.A: Use test-cases to find errors or validate results. | . | . Questions . Q10: Consider the following instance variable and methods. You may assume that data has been initialized with length &gt; 0. The methods are intended to return the index of an array element equal to target, or -1 if no such element exists. . For which of the following test cases will the call seqSearchRec(5) always result in an error? . data contains only one element. | data does not contain the value 5. | data contains the value 5 multiple times. | I chose 1 only but the answer was 2 only | Notes: I could not understand how to even approach the question | I now understand that if the value 5 were not present, it would not be possible for it to run as there would be an error | . | . Q11: Consider the following instance variable and methods. You may assume that data has been initialized with length &gt; 0. The methods are intended to return the index of an array element equal to target, or -1 if no such element exists. . I chose if (last &lt; data.length) return -1 but the answer was if (last &lt; 0) return -1; | Notes: I didn’t realize that the last element had to be less than 0 | In reality, last &lt; data.length will always return true on the first call, making it clearly false | . | . Q12: What is returned as a result of the call mystery(“computer”) ? . I selected the answer “cmue” when in reality the answer was “optr” | Notes: I didn’t read that the index of k started at 1 and not 0 | I needed to read better | I got the correct answer assuming that k started at 0, so I should do a better job reading and I would be fine | . | . Q21: Consider the following method, which is intended to return the element of a 2-dimensional array that is closest in value to a specified number, val. Which of the following could be used to replace / * missing code * / so that findClosest will work as intended? . I selected Math.abs (num - minDiff) &lt; minDiff but the answer was Math.abs (num - val) &lt; minDiff | Notes: To find the closest value to the value, you need to find the difference between the num and val rather than the num and the minDiff | . | . Q23: What will the contents of animals be as a result of calling manipulate? . Assume that animals has been instantiated and initialized with the following contents. . I chose [“baboon”, “bear”, “zebra”, “bass”, “cat”, “koala”] but the answer is [“bear”, “zebra”, “bass”, “cat”, “koala”, “baboon”] | Notes: I forgot that the later letters than just the first letter could be “b” | Notes: Only 1 iteration of this loop would occur now | . | . | . Q24: Consider the following code segment. What is printed as a result of executing the code segment? . I chose 5, but the answer was 7 | Notes: I just had an error somewhere in my calculations, causing me to get 5 instead of 7 | The value of the newArray is 7 at (0,2) | . | .",
            "url": "https://icygs.github.io/Krish-CSA/final/2022/11/07/Collegeboard-Final-MC.html",
            "relUrl": "/final/2022/11/07/Collegeboard-Final-MC.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Unit 6 Arrays",
            "content": "Declaring Arrays . Two types, arrays and ArrayLists Primitive data types contain a single var type (int, charm float) Referenced (string array classes) . Array Syntax . int[] array = new int[10]; . Common Errors . values has 10 elements but the index can only range from 0 to 9 Work like objects so must initialize . Traverse an Array . Main way is For loops where you go through each element of the array (enhanced or basic) Basic For loop is For when you know number of elements . Homework . Write a class called ArrayMethods that contains two methods that utilize/manipulate an array. You may choose 2 of the 4 options below to complete. Extra credit for doing all 4 options. Make sure to show test cases for all of the options you choose. . public class ArrayMethods { private int[] values = {0, 1, 2, 3}; public void printElements(){ for(int i = 0; i &lt; values.length; i++){ System.out.println(values[i]); } } public void swapElements(){ int last = values[values.length-1]; values[values.length-1] = values[0]; values[0] = last; } public void evenToZero(){ for(int i = 0; i &lt; values.length; i++){ if (values[i] % 2 == 0){ values[i] = 0; } } } public static void main(String[] args){ System.out.println(&quot;First and Last Element Swap: &quot;); ArrayMethods swapElements = new ArrayMethods(); swapElements.swapElements(); swapElements.printElements(); System.out.println(&quot;Replacing All Elements w/ Zero: &quot;); ArrayMethods evenToZero = new ArrayMethods(); swapElements.evenToZero(); swapElements.printElements(); } } ArrayMethods.main(null); . First and Last Element Swap: 3 1 2 0 Replacing All Elements w/ Zero: 3 1 0 0 .",
            "url": "https://icygs.github.io/Krish-CSA/final/2022/10/25/Unit-6-Arrays.html",
            "relUrl": "/final/2022/10/25/Unit-6-Arrays.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Unit 5 Classes",
            "content": "Link to presentation to follow along: Link . Link to Jupyter Notebook: Link .",
            "url": "https://icygs.github.io/Krish-CSA/college%20board/2022/10/20/Unit-5-Classes.html",
            "relUrl": "/college%20board/2022/10/20/Unit-5-Classes.html",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Unit 4 Iteration",
            "content": "Iteration . Basically makes code a lot shorter | You need an operator | ++ or -- | Postfix or prefix mode | Examples WHile loop | for loop | recursion loop | nested iteration | . | . While loop . Keeps running while something is true | Until the condition is false it&#39;ll stop | . For loop . For as long as a condition is met, something will keep occuring | For each part of the loop | . Recursion Loop . You have a function and in that function you put that function itself inside | Function calls itself to repeat (recurses) | . Nested iteration . Not a method but rather a technique | Putting a loop inside of a loop | | . import java.util.Scanner; public class Checker { public static void main(String[] args) { int number; // Create a Scanner object for keyboard input. Scanner keyboard = new Scanner(System.in); // Get a number from the user. System.out.print(&quot;Enter a number in the range of 1 through 100: &quot;); number = keyboard.nextInt(); while () { System.out.print(&quot;Invalid input. Enter a number in the range &quot; + &quot;of 1 through 100: &quot;); number = keyboard.nextInt(); } } } Checker.main(null); . | while () illegal start of expression . public class LoopConversion { public static void main(String[] args) { //convert to for loop for (int count = 1; count &lt; 5;count++) { System.out.println(&quot;count is &quot; + count); } } } .",
            "url": "https://icygs.github.io/Krish-CSA/college%20board/2022/10/19/Unit-4-Iteration.html",
            "relUrl": "/college%20board/2022/10/19/Unit-4-Iteration.html",
            "date": " • Oct 19, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Unit 3 and Unit 4 HW",
            "content": "Unit 3 . 2009 3b . public int getChargeStartTime(int chargeTime){ int startTime = 0; for (int i = 1; i &lt; 24; i++){ if (this.getChargingCost(i, chargeTime) &lt; this.getChargingCost(startTime, chargeTime)){ startTime = i; } } return startTime; } . 2017 1b . /** Returns true if the digits in this Digits object are in strictly increasing order; * false otherwise. */ public boolean isStrictlyIncreasing(){ for(int i = 1; i &lt; digitList.size(); i++){ if (digitList.get(i-1).compareTo(digitList.get(i)) &gt;= 0){ return false; } else{ return true; } } } . 2019 3b . public boolean isBalanced(ArrayList&lt;String&gt; delimiters) { int numOpen = 0 int numClosed = 0; for(String d:delimiters){ if(d.equals(openDel)){ numOpen++; } if(d.equals(closeDel)){ numClosed++; } } if(numOpen == numClosed){ return true; } else{ return false; } } . Unit 4 . Part 1 . import java.util.Scanner; public class GFG { public static void guessingNumberGame() { // Scanner Class Scanner sc = new Scanner(System.in); // Generate the numbers int number = 1 + (int)(100 * Math.random()); int K = 5; int i, guess; System.out.println( &quot;A number is chosen&quot; + &quot; between 1 to 100.&quot; + &quot;Guess the number&quot; + &quot; within 5 trials.&quot;); // Iterate over K Trials for (i = 0; i &lt; K; i++) { System.out.println(&quot;Guess the number:&quot;); guess = sc.nextInt(); if (number == guess) { System.out.println(&quot;Congratulations!&quot;+ &quot; You guessed the number.&quot;); break; } else if (number &gt; guess &amp;&amp; i != K - 1) { System.out.println(&quot;The number is &quot; + &quot;greater than &quot; + guess); } else if (number &lt; guess &amp;&amp; i != K - 1) { System.out.println(&quot;The number is&quot; + &quot; less than &quot; + guess); } } if (i == K) { System.out.println(&quot;You have exhausted &quot; + K + &quot; trials.&quot;); System.out.println(&quot;The number was &quot; + number); } } public static void main(String arg[]) { // Function Call guessingNumberGame(); } } GFG.main(null); . Part 2 . Form Completion Screenshot .",
            "url": "https://icygs.github.io/Krish-CSA/college%20board/2022/10/18/Unit-3-FRQs.html",
            "relUrl": "/college%20board/2022/10/18/Unit-3-FRQs.html",
            "date": " • Oct 18, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Unit 3 Boolean Expressions and If Statements",
            "content": "Unit 3 . Very large amount of the AP exam | Switch cases are more efficient | Booleans for assignment and comparative logic | . If Statements . Logic gates in the condition | Else if is another condition | Else is what happens when nothing else is true | . Switch statement . More efficient because it is nested | Executed more quickly | . Boolean Expressions . Compare 2 types of data | 1 is true; 0 is false | == is comparison | = is assignment | != is inequality | Can be used with other operators as well | . Logic Gate Symbols . Multiple symbols | . De Morgans Law . not(A and B) is equal to (not A or not B) | . Truth Table . Shows inputs | Outputs of the condition | .",
            "url": "https://icygs.github.io/Krish-CSA/college%20board/2022/10/18/Unit-3-Booleans-and-If-Statements.html",
            "relUrl": "/college%20board/2022/10/18/Unit-3-Booleans-and-If-Statements.html",
            "date": " • Oct 18, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Unit 2 Using Objects",
            "content": "OOP . Programming paradigm around objects | Compartmentalize data and function in such a way that data and the functions that operate on the data are bound together ## Classes | Classes are a template | Objects in the same class will share common methods and attributes | Fruit example ## Creating an Object | Members methods constructors | Initialized by calling the class constructor | Access modifier | return type | method name | parameter list | exception list | method body | . Painter mypainter = new Painter(); . Example of declaring methods . public int max (int x, int y){ if(x&gt;y) return x; else return y; } . Calling Methods . Allows code reuse for optimization and organization | Remember semicolons | objectReference.methodName(parameters); | Import math class to use the functions in that class | . Vocab . Signature: constructor name and list of parameters | Overloaded constructor: multiple constructors with same name but different parameters | No arg constructor: no arguments (parameters) have been inputted into a method | . Void . Don&#39;t return anything | uses null reference to call | . Non void . Return the type of data requested in the signature of the method | . Homework . public class Goblin { private String name; private int HP; private int DMG; private double hitChance; private double criticalHitChance; public String getName() { return name; } public int getHP() { return HP; } public int getDMG() { return DMG; } public double getHitChance() { return hitChance; } public double getCriticalHitChance(){ return criticalHitChance; } public boolean isAlive() { if (this.HP &gt; 0) { return true; } else { return false; } } public void setName(String newName) { this.name = newName; } public void setHP(int newHP) { this.HP = newHP; } public void takeDMG(int takenDamage) { this.HP -= takenDamage; } public void setDMG(int newDMG) { this.DMG = newDMG; } public void setHitChance(double newHitChance) { this.hitChance = newHitChance; } public void setCriticalHitChance(double newCriticalHitChance) { this.criticalHitChance = newCriticalHitChance; } } . import java.lang.Math; public class Duel { public static void attack(Goblin attackerGoblin, Goblin attackeeGoblin) { System.out.println(attackerGoblin.getName() + &quot; attacks &quot; + attackeeGoblin.getName() + &quot;!&quot;); if (Math.random() &lt; attackerGoblin.getHitChance()) { if (Math.random() &lt; attackerGoblin.getCriticalHitChance()){ attackeeGoblin.takeDMG(2*attackerGoblin.getDMG()); System.out.println(attackerGoblin.getName() + &quot; lands a critical hit!&quot;); System.out.println(attackeeGoblin.getName() + &quot; takes &quot; + 2*attackerGoblin.getDMG() + &quot; damage&quot;); } else{ attackeeGoblin.takeDMG(attackerGoblin.getDMG()); System.out.println(attackerGoblin.getName() + &quot; hits!&quot;); System.out.println(attackeeGoblin.getName() + &quot; takes &quot; + attackerGoblin.getDMG() + &quot; damage&quot;); } } else { System.out.println(attackerGoblin.getName() + &quot; misses...&quot;); } System.out.println(attackeeGoblin.getName() + &quot; HP: &quot; + attackeeGoblin.getHP()); System.out.println(); } public static void fight(Goblin goblin1, Goblin goblin2) { while (goblin1.isAlive() &amp;&amp; goblin2.isAlive()) { attack(goblin1, goblin2); if (!goblin1.isAlive()) { System.out.println(goblin1.getName() + &quot; has perished&quot;); break; } attack(goblin2, goblin1); if (!goblin2.isAlive()) { System.out.println(goblin2.getName() + &quot; has perished&quot;); break; } } } public static void main(String[] args) { Goblin goblin1 = new Goblin(); goblin1.setName(&quot;jeffrey&quot;); goblin1.setHP(12); goblin1.setDMG(2); goblin1.setHitChance(0.50); goblin1.setCriticalHitChance(0.1); Goblin goblin2 = new Goblin(); goblin2.setName(&quot;Gunther the great&quot;); goblin2.setHP(4); goblin2.setDMG(1); goblin2.setHitChance(1); goblin1.setCriticalHitChance(0.5); fight(goblin1, goblin2); } } Duel.main(null); . jeffrey attacks Gunther the great! jeffrey misses... Gunther the great HP: 4 Gunther the great attacks jeffrey! Gunther the great hits! jeffrey takes 1 damage jeffrey HP: 11 jeffrey attacks Gunther the great! jeffrey hits! Gunther the great takes 2 damage Gunther the great HP: 2 Gunther the great attacks jeffrey! Gunther the great hits! jeffrey takes 1 damage jeffrey HP: 10 jeffrey attacks Gunther the great! jeffrey misses... Gunther the great HP: 2 Gunther the great attacks jeffrey! Gunther the great hits! jeffrey takes 1 damage jeffrey HP: 9 jeffrey attacks Gunther the great! jeffrey lands a critical hit! Gunther the great takes 4 damage Gunther the great HP: -2 Gunther the great attacks jeffrey! Gunther the great hits! jeffrey takes 1 damage jeffrey HP: 8 Gunther the great has perished .",
            "url": "https://icygs.github.io/Krish-CSA/college%20board/2022/10/13/Unit-2-Using-Objects.html",
            "relUrl": "/college%20board/2022/10/13/Unit-2-Using-Objects.html",
            "date": " • Oct 13, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Unit 1 Primitives",
            "content": "Overview . Primitive data types . ints | booleans | doubles | chars | . | String literals: String created when you double quote String . | Literal: Something that means exactly what you define it to | Errors Types: syntax error | exception | logic error | . | . Variables . defined when you put the type of variable that it is before hand and then initiate it | must use camel case when naming variables | example: | . int score; . Arithmetic Operators . There are + - * and / | Represent add, subtract, multiply, and divide | Integer operations result in integers | Both int and double produce double | only doubles produces double | dividing by 0 is an arithmetic exception | . int x = 5; int y = 6; System.out.println(x+y); . 11 . Compound operators . +=, -=, *=, /=, %= | Changes value of variable by doing arithmetic operation with that variable | . Increment operators . ++ or -- which either go up 1 or go down 1 useful for for loops | . | . Casting . Treating a variable as another type of variable | Operators: (int) or (double) | . Division . Two integers become 1 integer | A double and an integer become a double | . 2006 FRQ . 2a . A set of classes is used to represent various items that are available for purchase. Items are either taxable or nontaxable. The purchase price of a taxable item is computed from its list price and its tax rate. The purchase price of a nontaxable item is simply its list price. Part of the class hierarchy is shown in the diagram below. . Write the TaxableItem method purchasePrice. The purchase price of a TaxableItem is its list price plus the tax on the item. The tax is computed by multiplying the list price by the tax rate. For example, if the tax rate is 0.10 (representing 10%), the purchase price of an item with a list price of 7.15. Complete method purchasePrice below. . // returns the price of the item including the tax public double purchasePrice(){ double price = 1.1 * getListPrice(); return price; } . 3a . Consider the following incomplete class that stores information about a customer, which includes a name and unique ID (a positive integer). To facilitate sorting, customers are ordered alphabetically by name. If two or more customers have the same name, they are further ordered by ID number. A particular customer is &quot;greater than&quot; another customer if that particular customer appears later in the ordering than the other customer. . Write the Customer method compareCustomer, which compares this customer to a given customer, other. Customers are ordered alphabetically by name, using the compareTo method of the String class. If the names of the two customers are the same, then the customers are ordered by ID number. Method compareCustomer should return a positive integer if this customer is greater than other, a negative integer if this customer is less than other, and 0 if they are the same. . public int compareCustomer(Customer other){ int nameCompare = this.getName().compareTo(other.getName()); if(nameCompare == 0){ return this.getID() - other.getID(); } else{ return nameCompare; } } .",
            "url": "https://icygs.github.io/Krish-CSA/college%20board/2022/10/12/Unit-1-Primitives.html",
            "relUrl": "/college%20board/2022/10/12/Unit-1-Primitives.html",
            "date": " • Oct 12, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Array Lists",
            "content": "What is an Array List? . An array list is basically an array that you can change the size of. This is unlike normal arrays, as they have their size set from the start and you cannot change the preassigned size of that array. . Application to Science Olympiad Website . Since we are making a Science Olympiad Website anyways, it would be great to get some of it started here so that we can get a bit of a head start on some of the things that we need to do to make this a fully functioning website. . import java.util.ArrayList; import java.util.Collections; import java.util.List; public class Member{ String firstname; String lastname; String role; int grade; String email; public Member(String firstname, String lastname, String role, int grade, String email){ this.firstname = firstname; this.lastname = lastname; this.role = role; this.grade = grade; this.email = email; } public String toString() { return String.format(&quot;%s t%s t%s t%d t%s&quot;, firstname, lastname, role, grade, email); } public static void main(String[] args){ List&lt;Member&gt; listMembers = new ArrayList&lt;Member&gt;(); listMembers.add(new Member(&quot;Krish&quot;, &quot;Patil&quot;, &quot;Leadership&quot;, 11, &quot;krishpatil1019@gmail.com&quot;)); listMembers.add(new Member(&quot;Don&quot;, &quot;Tran&quot;, &quot;Leadership&quot;, 11, &quot;donqt@gmail.com&quot;)); listMembers.add(new Member(&quot;Rohan&quot;, &quot;Gaikwad&quot;, &quot;Vice President&quot;, 11, &quot;gaikwadrohan326@gmail.com&quot;)); listMembers.add(new Member(&quot;Audrey&quot;, &quot;Zeng&quot;, &quot;President&quot;, 12, &quot;audreyhuaxia@gmail.com &quot;)); for (Member n : listMembers){ System.out.println(n); } } } Member.main(null); . Krish Patil Leadership 11 krishpatil1019@gmail.com Don Tran Leadership 11 donqt@gmail.com Rohan Gaikwad Vice President 11 gaikwadrohan326@gmail.com Audrey Zeng President 12 audreyhuaxia@gmail.com . Here we can see some of our members along with their roles, grade, and email! .",
            "url": "https://icygs.github.io/Krish-CSA/college%20board/2022/10/05/ArrayLists.html",
            "relUrl": "/college%20board/2022/10/05/ArrayLists.html",
            "date": " • Oct 5, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "API Implementation",
            "content": "Explanation of API&#39;s . API&#39;s are basically a way to store a large amount of data and then be able to get that data without having to copy paste it directly from another source. Basically, you can call API&#39;s in java and then have that data be transferred so that you can do things with it. JSON is used to transmit data. With an API, you save so much time. Since they&#39;re just basically a massive data pool, you can easily take out data. Unfortunately, these have limitations that we cannot get around without paying a bit, but we will not be doing that in this case. . import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; //RapidAPI header https://rapidapi.com/spamakashrajtech/api/corona-virus-world-and-india-data HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://google-translate1.p.rapidapi.com/language/translate/v2/detect&quot;)) .header(&quot;content-type&quot;, &quot;application/x-www-form-urlencoded&quot;) .header(&quot;Accept-Encoding&quot;, &quot;application/gzip&quot;) .header(&quot;X-RapidAPI-Key&quot;, &quot;1549fa8a93msh73da228ed60b0a1p1beb30jsn1480b3d082a4&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;google-translate1.p.rapidapi.com&quot;) .method(&quot;POST&quot;, HttpRequest.BodyPublishers.ofString(&quot;q=English%20is%20hard%2C%20but%20detectably%20so&quot;)) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); . {&#34;data&#34;:{&#34;detections&#34;:[[{&#34;isReliable&#34;:false,&#34;confidence&#34;:1,&#34;language&#34;:&#34;en&#34;}]]}} . package com.nighthawk.spring_portfolio.mvc.translate; import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; import java.util.Date; import java.util.HashMap; import org.json.simple.JSONObject; import org.json.simple.parser.JSONParser; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; @RestController // annotation to create a RESTful web services @RequestMapping(&quot;/api/google-translate1&quot;) //prefix of API public class translate { private JSONObject body; //last run result private HttpStatus status; //last run status String last_run = null; //last run day of month // GET Covid 19 Stats @GetMapping(&quot;/daily&quot;) //added to end of prefix as endpoint public ResponseEntity&lt;JSONObject&gt; getTranslate() { //calls API once a day, sets body and status properties String today = new Date().toString().substring(0,10); if (last_run == null || !today.equals(last_run)) { try { //APIs can fail (ie Internet or Service down) //RapidAPI header HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://google-translate1.p.rapidapi.com/language/translate/v2/detect&quot;)) .header(&quot;content-type&quot;, &quot;application/x-www-form-urlencoded&quot;) .header(&quot;Accept-Encoding&quot;, &quot;application/gzip&quot;) .header(&quot;X-RapidAPI-Key&quot;, &quot;1549fa8a93msh73da228ed60b0a1p1beb30jsn1480b3d082a4&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;google-translate1.p.rapidapi.com&quot;) .method(&quot;POST&quot;, HttpRequest.BodyPublishers.ofString(&quot;q=English%20is%20hard%2C%20but%20detectably%20so&quot;)) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); //JSONParser extracts text body and parses to JSONObject this.body = (JSONObject) new JSONParser().parse(response.body()); this.status = HttpStatus.OK; //200 success this.last_run = today; } catch (Exception e) { //capture failure info HashMap&lt;String, String&gt; status = new HashMap&lt;&gt;(); status.put(&quot;status&quot;, &quot;RapidApi failure: &quot; + e); //Setup object for error this.body = (JSONObject) status; this.status = HttpStatus.INTERNAL_SERVER_ERROR; //500 error this.last_run = null; } } //return JSONObject in RESTful style return new ResponseEntity&lt;&gt;(body, status); } } .",
            "url": "https://icygs.github.io/Krish-CSA/pbl/2022/09/29/API-Implementation.html",
            "relUrl": "/pbl/2022/09/29/API-Implementation.html",
            "date": " • Sep 29, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "2D Array Images",
            "content": "import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;BlueSunset&quot;; String in = &quot;images/&quot;; String out = &quot;images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); . Success . Image Scaling and ASCII Conversion . import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;MonaLisa&quot;; String in = &quot;images/&quot;; String out = &quot;images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); Image Scaling and ASCII Conversion In this example we print out a row of text for each row in the image. However, it seems as if the image is too tall. To address this problem, try to output a single character per block of pixels. In particular, average the grayscale values in a rectangular block that’s twice as tall as it is wide, and print out a single character for this block. import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisa.printStats(&quot;Original&quot;); monaLisa.resize(33); monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToAscii(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); pumpkin.printStats(&quot;Original&quot;); pumpkin.resize(33); pumpkin.printStats(&quot;Scaled&quot;); pumpkin.convertToAscii(); } } Pics.main(null); . Original: 1330606 922x922 images/BlueSunset.png Scaled: 226836 304x304 images/tmp/BlueSunset.png . java.lang.NullPointerException: Cannot invoke &#34;java.awt.image.BufferedImage.getRGB(int, int)&#34; because &#34;&lt;local1&gt;&#34; is null at Pics.redScale(#32:1) at Pics.main(#32:1) at .(#38:1) . The Kernel crashed while executing code in the the current cell or a previous cell. Please review the code in the cell(s) to identify a possible cause of the failure. Click &lt;a href=&#39;https://aka.ms/vscodeJupyterKernelCrash&#39;&gt;here&lt;/a&gt; for more info. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. . Setup and Getting Data . Before we write any code that color scales, we must first make a method that will get all of the data from the image that we put in. This is so that we don&#39;t rewrite the code over and over again. . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; abstract class ImageData { protected final String inDir = &quot;images/&quot;; // location of images protected final String outDir = &quot;images/tmp/&quot;; // location of created files protected String inFile; protected String resizedFile; protected String colorFile; protected String ext; // extension of file protected long bytes; protected int width; protected int height; // get attributes of picture public ImageData(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.colorFile = this.outDir + name + &quot;New&quot; + &quot;.png&quot;; this.setStats(); } public ImageData(String image) { this(image, &quot;png&quot;); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } //ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // Will be used later protected abstract void scale(String color); } . Color Scaling . Now, moving onto the hacks. The goal is to be able to scale the colors of the image so that they are Red, Green, or Blue. Rather than creating 3 separate methods to do this, we can rather just make a method that does all 3 at the same time! We can do this by specifying which color we want it to be scaled to (red, green, or blue) and then have a different output for each. Also, I added gray scaling as well. To do this, you would just take the average of all of the RGB values and then set that as the R, G, and B value of that particular color cell. If you want to do ASCII, input ASCII into the method so that the method converts the image to ASCII. . package _notebooks; import java.awt.Color; import java.awt.image.BufferedImage; import java.io.File; import java.io.IOException; import java.nio.file.Files; import javax.imageio.ImageIO; public class ColorScale extends ImageData { public ColorScale(String name, String color, String ext) { super(name, ext); this.colorFile = this.outDir + name + color + &quot;.png&quot;; } public ColorScale(String name, String color) { super(name, color); this.colorFile = this.outDir + name + color + &quot;.png&quot;; } @Override protected void scale(String color) { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; Color col = null; // Deletes previously named file if exists try { File file = new File(this.colorFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { e.printStackTrace(); } if (color.equals(&quot;Red&quot;)){ for (int i = 0; i &lt; this.height; i++) { for (int j = 0; j &lt; this.width; j++) { Color col = new Color(img.getRGB(j, i)); int rgb = new Color(col.getRed(), 0, 0).getRGB(); img.setRGB(j, i, rgb); } } } if (color.equals(&quot;Blue&quot;)){ for (int i = 0; i &lt; this.height; i++) { for (int j = 0; j &lt; this.width; j++) { Color col = new Color(img.getRGB(j, i)); int rgb = new Color(0, 0, col.getBlue()).getRGB(); img.setRGB(j, i, rgb); } } } if (color.equals(&quot;Green&quot;)){ for (int i = 0; i &lt; this.height; i++) { for (int j = 0; j &lt; this.width; j++) { Color col = new Color(img.getRGB(j, i)); int rgb = new Color(0, col.getGreen(), 0).getRGB(); img.setRGB(j, i, rgb); } } } if (color.equals(&quot;Gray&quot;)){ for (int i = 0; i &lt; this.height; i++){ for (int j = 0; j &lt; this.width; j++){ Color col = new Color(img.getRGB(j,i)); int rgb = new Color(((col.getRed()+ col.getGreen()+ col.getBlue())/3), ((col.getRed()+ col.getGreen()+ col.getBlue())/3), ((col.getRed()+ col.getGreen()+ col.getBlue())/3)).getRGB(); img.setRGB(j, i, rgb); } } } if(color.equals(&quot;ASCII&quot;)){ final int XLENGTH = 1; final int YLENGTH = 2; for (int i = 0; i &lt; img.getHeight(); i += 4) { for (int j = 0; j &lt; img.getWidth(); j += 2) { double colorSum = 0; int counter = 0; for (int k = 0; k &lt; XLENGTH; k++) { for (int l = 0; l &lt; YLENGTH; l++) { if (k &lt; img.getWidth() &amp;&amp; l &lt; img.getHeight()) { counter++; col = new Color(img.getRGB(j + k, i + l)); colorSum += (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col.getGreen() * 0.11))); } } } double average = colorSum / counter; try { asciiPrt.print(asciiChar(average)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } try { ImageIO.write(img, &quot;png&quot;, new File(this.colorFile) ); } catch (IOException e) { e.printStackTrace(); } } public static void main(String[] args) { ColorScale BlueSunset = new ColorScale(&quot;BlueSunset&quot;, &quot;png&quot;); BlueSunset.scale(&quot;Red&quot;); BlueSunset.scale(&quot;Green&quot;); BlueSunset.scale(&quot;Blue&quot;); BlueSunset.scale(&quot;Gray&quot;); } } . Click on the links if you want to see the original image, the Red scaled image, the Green scaled image, the Blue scaled image, and the Gray scaled image. As for the ASCII, it was coded but the output is very scuffed and does not appeal to the eyes so I&#39;m not going to show it (for your own good I assure you). The picture is very monotone and that causes it to not have the best ASCII output. .",
            "url": "https://icygs.github.io/Krish-CSA/college%20board/2022/09/27/Image-2D-array.html",
            "relUrl": "/college%20board/2022/09/27/Image-2D-array.html",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "JavaScript UI Development",
            "content": "console.log(&quot;Hi&quot;); . Hi . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); //&quot;typeof&quot; keyword returns the type. } . function Person(name, email, classOf) { this.name = name; this.email = email; this.classOf = classOf; this.role = &quot;&quot;; } Person.prototype.setRole = function(role) { this.role = role; } Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.email, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jmortensen@powayusd.com&quot;, 1977); // object type is easy to work with in JavaScript logItType(teacher); // before role logItType(teacher.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with Teacher teacher.setRole(&quot;Teacher&quot;); // set the role logItType(teacher); logItType(teacher.toJSON()); . object ; Person { name: &#39;Mr M&#39;, email: &#39;jmortensen@powayusd.com&#39;, classOf: 1977, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jmortensen@powayusd.com&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;&#34;} object ; Person { name: &#39;Mr M&#39;, email: &#39;jmortensen@powayusd.com&#39;, classOf: 1977, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jmortensen@powayusd.com&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} . var students = [ new Person(&quot;Krish Patil&quot;, &quot;krishpatil1019@gmail.com&quot;, 2024), new Person(&quot;Don Tran&quot;, &quot;donqt15@gmail.com&quot;, 2024), new Person(&quot;Nathan Manango&quot;, &quot;prorichyman@gmail.com&quot;, 2024), new Person(&quot;Nicholas Ramos&quot;, &quot;nicky.jay77@gmail.com&quot;, 2024), ]; function Classroom(teacher, students){ teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } compsci = new Classroom(teacher, students); logItType(compsci.classroom); logItType(compsci.classroom[0].name); logItType(compsci.json[0]); logItType(JSON.parse(compsci.json[0])); . object ; [ Person { name: &#39;Mr M&#39;, email: &#39;jmortensen@powayusd.com&#39;, classOf: 1977, role: &#39;Teacher&#39; }, Person { name: &#39;Krish Patil&#39;, email: &#39;krishpatil1019@gmail.com&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Don Tran&#39;, email: &#39;donqt15@gmail.com&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Nathan Manango&#39;, email: &#39;prorichyman@gmail.com&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Nicholas Ramos&#39;, email: &#39;unknown&#39;, classOf: 2024, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jmortensen@powayusd.com&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jmortensen@powayusd.com&#39;, classOf: 1977, role: &#39;Teacher&#39; } . Classroom.prototype._toHtml = function() { var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid white;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em black;&quot; ); var body = &quot;&quot;; body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Email&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; for (var row of compsci.classroom) { body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.email + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;tr&gt;&quot;; } return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; $$.html(compsci._toHtml()); . NameEmailClass OfRole . Mr M | jmortensen@powayusd.com | 1977 | Teacher | Krish Patil | krishpatil1019@gmail.com | 2024 | Student | Don Tran | donqt15@gmail.com | 2024 | Student | Nathan Manango | prorichyman@gmail.com | 2024 | Student | Nicholas Ramos | unknown | 2024 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://icygs.github.io/Krish-CSA/pbl/2022/09/24/javascript-data.html",
            "relUrl": "/pbl/2022/09/24/javascript-data.html",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Fibonacci Algorithm",
            "content": "Fibo Class . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result long executionTime; /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { final long startTime = System.nanoTime(); this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); this.executionTime = System.nanoTime() - startTime; } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } System.out.println(&quot;Init method runtime = &quot; + this.executionTime); } static class FiboFor extends Fibo { public FiboFor() { super(20); } public FiboFor(int n) { super(n); } @Override protected void init() { final long startTime = System.nanoTime(); this.name = &quot;For&quot;; long[] numbers = {0, 1}; for (int i = 0; i &lt; this.size; i++) { this.setData(numbers[0]); numbers = new long[] {numbers[1], numbers[0] + numbers[1]}; } this.executionTime = System.nanoTime() - startTime; } } // While-loop implementation static class FiboWhile extends Fibo { public FiboWhile() { super(20); } public FiboWhile(int n) { super(n); } @Override protected void init() { final long startTime = System.nanoTime(); this.name = &quot;While&quot;; long[] numbers = {0, 1}; int i = 0; while (i &lt; this.size) { this.setData(numbers[0]); numbers = new long[] {numbers[1], numbers[0] + numbers[1]}; i++; } this.executionTime = System.nanoTime() - startTime; } } // Recursion impelmentation static class FiboRecursion extends Fibo { public FiboRecursion() { super(20); } public FiboRecursion(int n) { super(n); } @Override protected void init() { final long startTime = System.nanoTime(); this.name = &quot;Recursion&quot;; int counter = 0; long[] numbers = {0, 1}; increment(numbers, counter); this.executionTime = System.nanoTime() - startTime; } public void increment(long[] numbers, int counter) { this.setData(numbers[0]); if (counter &lt; this.size - 1) { numbers = new long[] {numbers[1], numbers[0] + numbers[1]}; increment(numbers, counter + 1); } } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); FiboFor test1 = new FiboFor(); this.executionTime = System.nanoTime() - startTime; test1.print(); FiboWhile test2 = new FiboWhile(); test2.print(); FiboRecursion test3 = new FiboRecursion(); test3.print(); } } Fibo.main(null); . Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Init method runtime = 1918708 Init method = For fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Init method runtime = 23292 Init method = While fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Init method runtime = 28208 Init method = Recursion fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Init method runtime = 27917 .",
            "url": "https://icygs.github.io/Krish-CSA/college%20board/2022/09/24/Fibonacci.html",
            "relUrl": "/college%20board/2022/09/24/Fibonacci.html",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Bio Notes",
            "content": "Speciation: When a species splits into more species | Adaptive radiation: 1 species becomes many | Divergent evolution: 1 species becomes 2 | . Ways for separation to occur . Pre-zygotic . Habitat (ecological) isolation | temporal (time/seasonal) | behavioral | mechanical | gametic (broadcast spawners: external fertilization (usually aquatic)) Sex cells | . | . Post-zygotic . reduced hybrid fertility Horse and donkey together can only make mules, but mules cannot mate mules, only horse and donkey together | hybrid can live but cannot reproduce | . | reduced hybrid viability Gets to a certain point in development, but most likely will die before reproductive age | hybrid can live but next generation will be very weak | breakdown in ability to sustain | . | hybrid breakdown | . Basically organism is formed but cannot live because of one of these three things . Allopatric . pop is split into two and isolated (by a barrier) | . Sympatric . together | plants | polyploid | (many)(chromosome set #) | .",
            "url": "https://icygs.github.io/Krish-CSA/biology/2022/09/21/Bio-notes.html",
            "relUrl": "/biology/2022/09/21/Bio-notes.html",
            "date": " • Sep 21, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Iteration Mini Lab - The Solar System",
            "content": "Iteration is useful, as it allows us to go through a list of items very quickly. We can easily store a list of things in an array and then call each of the elements with a simple line of code rather than having to write the entire thing again. All in all, Iteration just makes life a lot easier. . The Solar System . Here we are going to be demonstrating how 2D Array&#39;s and iteration work by taking a trip through the Solar System! . public class SolarSystem{ String [][] solarsystem; public SolarSystem(){ solarsystem = new String[][]{ { &quot; ,MMM8&amp;&amp;&amp;. &quot;, &quot; _...MMMMM88&amp;&amp;&amp;&amp;..._ &quot;, &quot; .::&#39;&#39;&#39;MMMMM88&amp;&amp;&amp;&amp;&amp;&amp;&#39;&#39;&#39;::. &quot;, &quot;:: MMMMM88&amp;&amp;&amp;&amp;&amp;&amp; ::&quot;, &quot;&#39;::....MMMMM88&amp;&amp;&amp;&amp;&amp;&amp;....::&#39;&quot;, &quot; `&#39;&#39;&#39;&#39;MMMMM88&amp;&amp;&amp;&amp;&#39;&#39;&#39;&#39;` &quot;, &quot; &#39;MMM8&amp;&amp;&amp;&#39; &quot; }, { &quot; _____ &quot;, &quot; ,-:` ;&#39;,`&#39;-, &quot;, &quot; .&#39;-;_,; &#39;:-;_,&#39;. &quot;, &quot; /; &#39;/ , _`.- &quot;, &quot;| &#39;`. (` /` ` `| &quot;, &quot;|:. ` `-. _ / |&quot;, &quot;| ( `, .` ;&#39;| &quot;, &quot; | .&#39; `-&#39;/ &quot;, &quot; `. ;/ .&#39; &quot;, &quot; `&#39;-._____. &quot; }, { &quot; .::.&quot;, &quot; .:&#39; .:&quot;, &quot; ,MMM8&amp;&amp;&amp;.:&#39; .:&#39;&quot;, &quot; MMMMM88&amp;&amp;&amp;&amp; .:&#39; &quot;, &quot; MMMMM88&amp;&amp;&amp;&amp;&amp;&amp;:&#39; &quot;, &quot; MMMMM88&amp;&amp;&amp;&amp;&amp;&amp; &quot;, &quot; .:MMMMM88&amp;&amp;&amp;&amp;&amp;&amp; &quot;, &quot; .:&#39; MMMMM88&amp;&amp;&amp;&amp; &quot;, &quot;.:&#39; .:&#39;MMM8&amp;&amp;&amp;&#39; &quot;, &quot;:&#39; .:&#39; &quot;, &quot;&#39;::&#39; &quot; }, { &quot; _.._ &quot;, &quot; .&#39; .-&#39;` &quot;, &quot; / / &quot;, &quot; | | &quot;, &quot; &#39;.___.;&quot;, &quot; &#39;._ _.&#39; &quot;, &quot; `` &quot; } }; } public void print(){ System.out.println(&quot; &quot;); System.out.println(&quot;The Solar System&quot;); int solarSystemCount = solarsystem.length; for (int i = solarSystemCount; i &gt; 0; i--){ System.out.println(i + &quot; Planets left to go..&quot;); for (int col = 0; col &lt; solarsystem[0].length; col++){ for (int row = 0; row &lt; i; row++){ System.out.print(solarsystem[row][col] + &quot; t&quot;); } System.out.println(); } System.out.println(&quot;The Sun ate a planet whole&quot;); System.out.println(&quot;We say RUN RUN RUN FROM THE SUN&quot;); System.out.println(&quot; n-- n&quot;); solarSystemCount -= 1; } System.out.println(&quot;No more planets in space :( n&quot;); System.out.println(&quot;--&quot;); System.out.println(&quot; THE END &quot;); } public static void main(String[] args){ new SolarSystem().print(); } } SolarSystem.main(null); . The Solar System 4 Planets left to go.. ,MMM8&amp;&amp;&amp;. _____ .::. _.._ _...MMMMM88&amp;&amp;&amp;&amp;..._ ,-:` ;&#39;,`&#39;-, .:&#39; .: .&#39; .-&#39;` .::&#39;&#39;&#39;MMMMM88&amp;&amp;&amp;&amp;&amp;&amp;&#39;&#39;&#39;::. .&#39;-;_,; &#39;:-;_,&#39;. ,MMM8&amp;&amp;&amp;.:&#39; .:&#39; / / :: MMMMM88&amp;&amp;&amp;&amp;&amp;&amp; :: /; &#39;/ , _`.- MMMMM88&amp;&amp;&amp;&amp; .:&#39; | | &#39;::....MMMMM88&amp;&amp;&amp;&amp;&amp;&amp;....::&#39; | &#39;`. (` /` ` `| MMMMM88&amp;&amp;&amp;&amp;&amp;&amp;:&#39; &#39;.___.; `&#39;&#39;&#39;&#39;MMMMM88&amp;&amp;&amp;&amp;&#39;&#39;&#39;&#39;` |:. ` `-. _ / | MMMMM88&amp;&amp;&amp;&amp;&amp;&amp; &#39;._ _.&#39; &#39;MMM8&amp;&amp;&amp;&#39; | ( `, .` ;&#39;| .:MMMMM88&amp;&amp;&amp;&amp;&amp;&amp; `` The Sun ate a planet whole We say RUN RUN RUN FROM THE SUN -- 3 Planets left to go.. ,MMM8&amp;&amp;&amp;. _____ .::. _...MMMMM88&amp;&amp;&amp;&amp;..._ ,-:` ;&#39;,`&#39;-, .:&#39; .: .::&#39;&#39;&#39;MMMMM88&amp;&amp;&amp;&amp;&amp;&amp;&#39;&#39;&#39;::. .&#39;-;_,; &#39;:-;_,&#39;. ,MMM8&amp;&amp;&amp;.:&#39; .:&#39; :: MMMMM88&amp;&amp;&amp;&amp;&amp;&amp; :: /; &#39;/ , _`.- MMMMM88&amp;&amp;&amp;&amp; .:&#39; &#39;::....MMMMM88&amp;&amp;&amp;&amp;&amp;&amp;....::&#39; | &#39;`. (` /` ` `| MMMMM88&amp;&amp;&amp;&amp;&amp;&amp;:&#39; `&#39;&#39;&#39;&#39;MMMMM88&amp;&amp;&amp;&amp;&#39;&#39;&#39;&#39;` |:. ` `-. _ / | MMMMM88&amp;&amp;&amp;&amp;&amp;&amp; &#39;MMM8&amp;&amp;&amp;&#39; | ( `, .` ;&#39;| .:MMMMM88&amp;&amp;&amp;&amp;&amp;&amp; The Sun ate a planet whole We say RUN RUN RUN FROM THE SUN -- 2 Planets left to go.. ,MMM8&amp;&amp;&amp;. _____ _...MMMMM88&amp;&amp;&amp;&amp;..._ ,-:` ;&#39;,`&#39;-, .::&#39;&#39;&#39;MMMMM88&amp;&amp;&amp;&amp;&amp;&amp;&#39;&#39;&#39;::. .&#39;-;_,; &#39;:-;_,&#39;. :: MMMMM88&amp;&amp;&amp;&amp;&amp;&amp; :: /; &#39;/ , _`.- &#39;::....MMMMM88&amp;&amp;&amp;&amp;&amp;&amp;....::&#39; | &#39;`. (` /` ` `| `&#39;&#39;&#39;&#39;MMMMM88&amp;&amp;&amp;&amp;&#39;&#39;&#39;&#39;` |:. ` `-. _ / | &#39;MMM8&amp;&amp;&amp;&#39; | ( `, .` ;&#39;| The Sun ate a planet whole We say RUN RUN RUN FROM THE SUN -- 1 Planets left to go.. ,MMM8&amp;&amp;&amp;. _...MMMMM88&amp;&amp;&amp;&amp;..._ .::&#39;&#39;&#39;MMMMM88&amp;&amp;&amp;&amp;&amp;&amp;&#39;&#39;&#39;::. :: MMMMM88&amp;&amp;&amp;&amp;&amp;&amp; :: &#39;::....MMMMM88&amp;&amp;&amp;&amp;&amp;&amp;....::&#39; `&#39;&#39;&#39;&#39;MMMMM88&amp;&amp;&amp;&amp;&#39;&#39;&#39;&#39;` &#39;MMM8&amp;&amp;&amp;&#39; The Sun ate a planet whole We say RUN RUN RUN FROM THE SUN -- No more planets in space :( -- THE END .",
            "url": "https://icygs.github.io/Krish-CSA/college%20board/2022/09/15/Iteration-2D-Array.html",
            "relUrl": "/college%20board/2022/09/15/Iteration-2D-Array.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "FRQ 1",
            "content": "The APCalendar class contains methods used to calculate information about a calendar. You will write two methods of the class. . public class APCalendar { /** Returns true if year is a leap year and false otherwise. */ private static boolean isLeapYear(int year){ /* implementation not shown */ } /** Returns the number of leap years between year1 and year2, inclusive. * Precondition: 0 &lt;= year1 &lt;= year2 */ public static int numberOfLeapYears(int year1, int year2){ /* to be implemented in part (a) */ } /** Returns the value representing the day of the week for the first day of year, * where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. */ private static int firstDayOfYear(int year){ /* implementation not shown */ } /** Returns n, where month, day, and year specify the nth day of the year. * Returns 1 for January 1 (month = 1, day = 1) of any year. * Precondition: The date represented by month, day, year is a valid date. */ private static int dayOfYear(int month, int day, int year){ /* implementation not shown */ } /** Returns the value representing the day of the week for the given date * (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., * and 6 denotes Saturday. * Precondition: The date represented by month, day, year is a valid date. */ public static int dayOfWeek(int month, int day, int year){ /* to be implemented in part (b) */ } // There may be instance variables, constructors, and other methods not shown. } . Part a . Write the static method numberOfLeapYears, which returns the number of leap years between year1 and year2, inclusive. . In order to calculate this value, a helper method is provided for you. . isLeapYear(year) returns true if year is a leap year and false otherwise. | . Complete method numberOfLeapYears below. You must use isLeapYear appropriately to receive full credit . /** Returns the number of leap years between year1 and year2, inclusive. * Precondition: 0 &lt;= year1 &lt;= year2 */ public static int numberOfLeapYears(int year1, int year2){ int num; for (int i = year1; i &lt;= year2; i++){ if (isLeapYear(i)){ num += 1; } } return(num); } . Part b . Write the static method dayOfWeek, which returns the integer value representing the day of the week for the given date (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. For example, 2019 began on a Tuesday, and January 5 is the fifth day of 2019. As a result, January 5, 2019, fell on a Saturday, and the method call dayOfWeek(1, 5, 2019) returns 6. . As another example, January 10 is the tenth day of 2019. As a result, January 10, 2019, fell on a Thursday, and the method call dayOfWeek(1, 10, 2019) returns 4. . In order to calculate this value, two helper methods are provided for you. . firstDayOfYear(year) returns the integer value representing the day of the week for the first day of year, where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. For example, since 2019 began on a Tuesday, firstDayOfYear(2019) returns 2. | dayOfYear(month, day, year) returns n, where month, day, and year specify the nth day of the year. For the first day of the year, January 1 (month = 1, day = 1), the value 1 is returned. This method accounts for whether year is a leap year. For example, dayOfYear(3, 1, 2017) returns 60, since 2017 is not a leap year, while dayOfYear(3, 1, 2016) returns 61, since 2016 is a leap year. | . Class information for this question . public class APCalendar private static boolean isLeapYear(int year) public static int numberOfLeapYears(int year1, int year2) private static int firstDayOfYear(int year) private static int dayOfYear(int month, int day, int year) public static int dayOfWeek(int month, int day, int year) . Complete method dayOfWeek below. You must use firstDayOfYear and dayOfYear appropriately to receive full credit. . /** Returns the value representing the day of the week for the given date * (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., * and 6 denotes Saturday. * Precondition: The date represented by month, day, year is a valid date. */ public static int dayOfWeek(int month, int day, int year){ int firstDay = firstDayOfYear(year); int date = dayOfYear(month, day, year) - 1; int day = firstDay + date; return(day%7); } .",
            "url": "https://icygs.github.io/Krish-CSA/college%20board/2022/09/14/Frq-1.html",
            "relUrl": "/college%20board/2022/09/14/Frq-1.html",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Ifs and Expressions Lesson",
            "content": "if statement . An if loop will run if a certain condition is met (a&gt;0, etc.). . int n = 5; if (n&gt;0){ System.out.println(&quot;Greater than 0!&quot;); //since 5&gt;0, it is printing that. } . Still greater than 0! . if-else statements . An if-else loop will run first test if something is true. If this is not true, it will perform another action, defined in the else portion of the if-else statement. . int n = 10; if (n&gt;15){ System.out.println(&quot;Greater than 15!&quot;); } else{ System.out.println(&quot;Less than (or equal to) 15!&quot;); //since n=10, it is less than 15 } . Less than (or equal to) 15! . if-else-if statements . An if-elseif-else statement will first check if a certain condition is met. If that condition is not met, it will then check if another condition is met. If that condition is also not met, the final action in the else statement will be run. . int n = 12; if (n&gt;15){ System.out.println(&quot;Greater than 15!&quot;); } else if (n&gt;10){ System.out.println(&quot;Greater than 10!&quot;); //Since 12 is not greater than 15 but is greater than 10, it is printed that it is greater than 10. } else{ System.out.println(&quot;Less than or equal to 10!&quot;); } . Greater than 10! . Switch Case . Switch case is basically where a condition is checked multiple times in multiple &quot;cases&quot;. This can have many uses similar to that of if-elseif-else loops but can have different uses. . int n = 12; if (n&gt;15){ System.out.println(&quot;Greater than 15!&quot;); } else if (n&gt;13){ System.out.println(&quot;Greater than 13!&quot;); } else if (n&gt;12){ System.out.println(&quot;Greater than 12!&quot;); } else if (n&gt;11){ System.out.println(&quot;Greater than 11!&quot;); //Since 12 is not greater than 15 but is greater than 11, it is printed that it is greater than 10. } else{ System.out.println(&quot;Less than or equal to 10!&quot;); } . Greater than 11! . This same process can be repeated using switch-case instead . int n = 12; String output; switch (n){ case 9: output = &quot;greater than 8&quot;; break; case 10: output = &quot;greater than 9&quot;; break; case 11: output = &quot;greater than 10&quot;; break; case 12: output = &quot;greater than 11&quot;; break; } System.out.println(output); . greater than 11 . De Morgan&#39;s Law . De Morgan&#39;s law states that Not (A and B) is the same as Not A or Not B. An example of this is I will not drink water and eat a table means the same thing is I will either not drink water or eat a table. . boolean A = true; boolean B = true; . if (!(A &amp;&amp; B)){ System.out.println(&quot;A and B both are false&quot;); } else{ System.out.println(&quot;A and B are true&quot;); } . A and B are true . if (!A || !B){ System.out.println(&quot;A and B both are false&quot;); } else{ System.out.println(&quot;A and B are true&quot;); } . A and B are true . As we can see, both of the if statements provide the same output, proving to us that De Morgan&#39;s law is true. .",
            "url": "https://icygs.github.io/Krish-CSA/college%20board/2022/09/09/if-else.html",
            "relUrl": "/college%20board/2022/09/09/if-else.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Week 3 Blog",
            "content": "Science Olympiad Goals . Star Chem Lab slides | Update old It’s About Time rules to have the new rule additions | Study Fermi Questions and memorize important constants Astronomical distances | Cell size | . | Figure out how the Trajectory math works Combine angle equation and rubber (spring equation using hooke’s law) equation | Add kinematics to find minimum velocity | . | Learn which elastic band to use and which is best | . Robotics Goals . Sign up! | Explain how robots work and show cool robots from the past 254 | 1678 | 148 | 118 | 1690 | 696 | . | Learn how center of mass calculations work for the robot | Learn CAD | Research good claws | Research how constant force springs work | . CTF Club Goals . Learn how to do CTF stuff in general | Leadership meeting saturday 9:30 pm | . Reflection from Harvard Video . Make sure to look at the good things in life | Always appreciate what you have and never compare to others | Make sure that when stuff does get hard, you are not overwhelming yourself | We should learn to stop putting off work till later so that we don’t struggle | Really learn to appreciate all the small things in life because it shows us that we are composed of those small things | .",
            "url": "https://icygs.github.io/Krish-CSA/2022/09/08/Weekly-Blog-1.html",
            "relUrl": "/2022/09/08/Weekly-Blog-1.html",
            "date": " • Sep 8, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Spring Boot Progress 1",
            "content": "Our Progress . Woooo so far we’ve created only a basic calculator but we’re hoping to expand upon that when we can. So far we have two versions of a basic calculator, each with its own limitations. . Desktop Application Calculator (Krish and Nicky) . Krish and Nicky worked together to set up a Desktop GUI that implemented a calculator using JFrame and Springboot. At its core, it simply takes two numbers which the user inputs and a function that the user specifies to perform a mathematical operation and output the value. Some limitations include: a lack of practical usability as a UI, limits to only two numbers being computed at a time, only one operator/function being able to be used at a time. Some pros include: a clean GUI that is accurate and does not need to interface with Spring’s web application programs, can perform relatively complex mathematical operations due to its ease of accessibility to Java’s math library. Some improvements: preferably a better GUI that gives the user a better range of options, maybe more operations, performing multiple operations at a time . Web Browser Application (Don and Nathan) . Don and Nathan worked together to set up a Web Browser Application that works as a very basic calculator that takes a string as an input. It then performs the operations it sees in the string on each of the values. It uses Spring Boot and MVC to interface the html output with the actual logic Some limitations include: a disregard for order of operations, very specific syntax has to be used most of the time or else it wont output at all or will output what the user outputted, its limited only to the four basic operations, the GUI only has a string user input and an = sign button that functions. Some pros include: it can perform multiple operations at a time, has a functioning GUI that is clean, runs on a web browser, is easy to visualize Some improvements include: Creating functioning buttons in its GUI, accounting for order of operations (likely to try to use tree data structure in order to implement this), more operators and functions . Future Work . To make a well made calculator and preferably to expand it as a tool to help with math problems, we’re likely to move towards the web development side of Spring Boot. It’s tools provide a relatively straightforward method to putting our java programs onto a web browser through its boiler plate code and hopefully that should enable us to focus mainly on the functionality of our web. Through this, we learned how to use JFRame and also understand how Spring Boot uses MVC to build a webpage using mostly HTML and Java files. .",
            "url": "https://icygs.github.io/Krish-CSA/spring%20boot/2022/09/06/Calculator-Blog.html",
            "relUrl": "/spring%20boot/2022/09/06/Calculator-Blog.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Code.org Objects Hacks",
            "content": "In java, there are things known as objects. These objects can be defined with the use of classes. . public class Krish{ } . Here we have created the class &quot;Krish&quot;. We can give this object characteristics, as shown below. . public class Krish { String height; int age; public Krish(){ this.height = &quot;68 inches&quot;; this.age = 15; } public void printInformation(){ System.out.println(&quot;Krish is &quot; + height + &quot; tall.&quot;); System.out.println(&quot;He is also &quot; + age + &quot; years old.&quot;); } } public class Sister extends Krish{ String name; int age; public Sister(){ this.name = &quot;Ishna&quot;; this.age = 7; } public void printInformation(){ System.out.println(name + &quot; is Krish&#39;s sister.&quot;); System.out.println(&quot;She is &quot; + age + &quot; years old.&quot;); } } public class Main{ public static void main(String []args) { Krish krish = new Krish(); Sister sister = new Sister(); krish.printInformation(); sister.printInformation(); } } Main.main(null); . Krish is 68 inches tall. He is also 15 years old. Ishna is Krish&#39;s sister. She is 7 years old. . Here we have given the object Krish some characteristics. We can use this object by doing .height or .age and getting the height and age of the object. . Here we can also see that the sister class is extending the Krish class, as Krish&#39;s sister extends himself. This is basically a extension of Krish and all of the variables from Krish. . public static String rearrange(String str) { String temp = &quot;&quot;; for (int i = str.length() - 1; i &gt; 0; i--) { temp += str.substring(i - 1, i); } return temp; } System.out.println(rearrange(&quot;apple&quot;)); . lppa .",
            "url": "https://icygs.github.io/Krish-CSA/college%20board/2022/09/04/Java-Notebook.html",
            "relUrl": "/college%20board/2022/09/04/Java-Notebook.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Code.org OOP",
            "content": "Refer to the Code.org notebook for examples of how to use objects! . . Classes . Classes are how objects are made. Without a Class, you cannot create an object. Each class has its own seperate java file (named with .java). A class can have variables and methods. . Class Instances . These are the objects themselves. To call an object, you want to do . Name name = new Name(); . Where “Name” is the Class name and the “name” is the object name . You can call a method by doing object.method(); . Object Mutating Data . Mutating data is basically where you are changing one form of data into another form. An example of this was where we converted a primitive data type into the Wrapper class. It is possible for an object to do this and convert some data type into another. . Extends . Extends can allow a class to inherit everything from another class, but allows additional features to be added. The class the is inheriting is the subclass, while the original class is the superclass. . The syntax to extend is extends superclass. . Loops . There are 2 main loops, while loops and if loops. . While loops run while something is true. | If loops run when a certain condition is met If loops can have an “else” line too to give an alternate function if the condition is not met in the “if” part of the loop. | . | .",
            "url": "https://icygs.github.io/Krish-CSA/code.org/2022/09/04/Codeorg.html",
            "relUrl": "/code.org/2022/09/04/Codeorg.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Calculator Project Plan",
            "content": "Work assignment . Krish: Work on calculator functionality | Don: Work on figuring out spring boot | Nathan: Frontend stuff | Nicky: Calculator functionality | . Plans . Input . Via textbox and buttons . Functionality . Takes input and uses the inputted operation and calculates end result | Will have multiple basic operators Addition | Subtraction | Multiplication | Division | Powers | Mod | Trig functions | Log functions | . | . Output . Original input Output . Answers | Errors | .",
            "url": "https://icygs.github.io/Krish-CSA/pbl/2022/09/04/Calculator-Planning.html",
            "relUrl": "/pbl/2022/09/04/Calculator-Planning.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "PBL Notes example",
            "content": "Notes Example . This is an example of how I will be taking notes this year! There is a “PBL” tag that is being used so that I can easily see which notes are PBL notes. o .",
            "url": "https://icygs.github.io/Krish-CSA/pbl/2022/08/28/notes.html",
            "relUrl": "/pbl/2022/08/28/notes.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "College Board Notes example",
            "content": "Notes Example . This is an example of how I will be taking notes this year! There is a “college board” tag that is being used so that I can easily see which notes are college board notes. o .",
            "url": "https://icygs.github.io/Krish-CSA/college%20board/2022/08/27/notes-test.html",
            "relUrl": "/college%20board/2022/08/27/notes-test.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Ap Chem Experiment Procedures",
            "content": "Spectrophotometry . Beers law . | Finding the relationship between Absorbance and concentration . | (A = abc) . | . Gravimetric Analysis . Disolve compound in water . | Heat to evaporate water, and make sure constant mass . | Filter and dry to get just mass of the compound . | Can find percent mass among other things with this . | . Titrations . Place an indicator around the pH of the equivalence point . | Keep the analyte below the titrant and slowly add the titrant using a burette. . Note initial and final volumes . | . | When color change occurs, stop titrating and note the final volume . | Since at equivalence point, mols acid = mols base, use (M_{A}V_{A} = M_{B}V_{B}) to find the unknown molarity . | . Kinetics . Using Beers law, find the relationship between concentration and absorbance for the substance . | Graph concentration vs time and get data points . | Graph ( lbrack A rbrack vs t, ln lbrack A rbrack vs t, and frac{1}{ lbrack A rbrack} text{vs t}) . | Whichever is the most linear is the order of the reaction, 0th, 1st, or 2nd, respectively . | . Calorimetry . Measure mass of substance, mass of water, initial and final temperature of water . | Use (q = mc Delta T = Delta H bullet mols) to solve . | .",
            "url": "https://icygs.github.io/Krish-CSA/2022/08/27/AP-Chem-Experiment-Procedures.html",
            "relUrl": "/2022/08/27/AP-Chem-Experiment-Procedures.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Water",
            "content": "Water . . Water has 2 Hydrogen atoms and 1 Oxygen atoms | Water is clear | Water is a universal solvent | Water is a liquid between 0°C and 100°C | .",
            "url": "https://icygs.github.io/Krish-CSA/biology/2022/08/26/water.html",
            "relUrl": "/biology/2022/08/26/water.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Bash Installation Checks",
            "content": "Checking if Java and Anaconda are installed . echo &quot;Lets check if Java is installed&quot; java --version echo &quot;&quot; echo &quot;Lets check if Annaconda is installed&quot; conda list . Lets check if Java is installed java 17.0.4.1 2022-08-18 LTS Java(TM) SE Runtime Environment (build 17.0.4.1+1-LTS-2) Java HotSpot(TM) 64-Bit Server VM (build 17.0.4.1+1-LTS-2, mixed mode, sharing) Lets check if Annaconda is installed # packages in environment at /Users/krishpatil/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.1.4 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . Updating a repository . export repository=Krish-CSA export repo_main_folder=vscode cd $HOME/$repo_main_folder/Krish-CSA git fetch origin git pull origin master . From https://github.com/icyGS/Krish-CSA * branch master -&gt; FETCH_HEAD Already up to date. . Doing some Installations . Automizes some of the installations, specifically git, python, and java! . arch -arm64 brew list arch -arm64 brew update arch -arm64 brew upgrade arch -arm64 brew install git arch -arm64 brew install python python --version arch -arm64 brew install java java --version javac --version . ==&gt; Formulae ca-certificates libidn2 openjdk python@3.10 wget gdbm libunistring openjdk@11 readline xz gettext maven openssl@1.1 spring-boot git mpdecimal pcre2 sqlite Already up-to-date. ==&gt; Upgrading 1 outdated package: openjdk 18.0.2 -&gt; 18.0.2.1 ==&gt; Downloading https://ghcr.io/v2/homebrew/core/openjdk/manifests/18.0.2.1 ######################################################################## 100.0% ==&gt; Downloading https://ghcr.io/v2/homebrew/core/openjdk/blobs/sha256:373ac8b65d ==&gt; Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/sh ######################################################################## 100.0% ==&gt; Upgrading openjdk 18.0.2 -&gt; 18.0.2.1 ==&gt; Pouring openjdk--18.0.2.1.arm64_monterey.bottle.tar.gz ==&gt; Caveats For the system Java wrappers to find this JDK, symlink it with sudo ln -sfn /opt/homebrew/opt/openjdk/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk.jdk openjdk is keg-only, which means it was not symlinked into /opt/homebrew, because macOS provides similar software and installing this software in parallel can cause all kinds of trouble. If you need to have openjdk first in your PATH, run: echo &#39;export PATH=&#34;/opt/homebrew/opt/openjdk/bin:$PATH&#34;&#39; &gt;&gt; ~/.zshrc For compilers to find openjdk you may need to set: export CPPFLAGS=&#34;-I/opt/homebrew/opt/openjdk/include&#34; ==&gt; Summary 🍺 /opt/homebrew/Cellar/openjdk/18.0.2.1: 642 files, 309MB ==&gt; Running `brew cleanup openjdk`... Disable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP. Hide these hints with HOMEBREW_NO_ENV_HINTS (see `man brew`). Removing: /opt/homebrew/Cellar/openjdk/18.0.2... (642 files, 309MB) Removing: /Users/krishpatil/Library/Caches/Homebrew/openjdk--18.0.2... (180.3MB) Warning: git 2.37.2 is already installed and up-to-date. To reinstall 2.37.2, run: brew reinstall git Warning: python@3.10 3.10.6_1 is already installed and up-to-date. To reinstall 3.10.6_1, run: brew reinstall python@3.10 Python 3.9.12 Warning: openjdk 18.0.2.1 is already installed and up-to-date. To reinstall 18.0.2.1, run: brew reinstall openjdk java 17.0.4.1 2022-08-18 LTS Java(TM) SE Runtime Environment (build 17.0.4.1+1-LTS-2) Java HotSpot(TM) 64-Bit Server VM (build 17.0.4.1+1-LTS-2, mixed mode, sharing) javac 17.0.4.1 . java --version python --version javac --version node --version . java 17.0.4.1 2022-08-18 LTS Java(TM) SE Runtime Environment (build 17.0.4.1+1-LTS-2) Java HotSpot(TM) 64-Bit Server VM (build 17.0.4.1+1-LTS-2, mixed mode, sharing) Python 3.9.12 javac 17.0.4.1 v10.13.0 . Shows all of the kernels installed for Jupyter . jupyter kernelspec list . Available kernels: python395jvsc74a57bd0aee8b7b246df8f9039afb4144a1f6fd8d2ca17a180786b69acc140d282b71a49 /Users/krishpatil/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python395jvsc74a57bd0aee8b7b246df8f9039afb4144a1f6fd8d2ca17a180786b69acc140d282b71a49 bash /Users/krishpatil/Library/Jupyter/kernels/bash java /Users/krishpatil/Library/Jupyter/kernels/java javascript /Users/krishpatil/Library/Jupyter/kernels/javascript python3 /Users/krishpatil/opt/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://icygs.github.io/Krish-CSA/jupyter/2022/08/25/Bash-Notebook.html",
            "relUrl": "/jupyter/2022/08/25/Bash-Notebook.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Java Primitives Notebook",
            "content": "Define in a Class the following data types Demonstrate use of Primitives: int, double, boolean, string Demonstrate use of Wrapper Class object: String . public class Primitives{ int anInt = 50; double aDouble = 5.5; boolean aBoolean = true; String aString = &quot;I love to code code code&quot;; } System.out.println(anInt); System.out.println(aDouble); System.out.println(aBoolean); System.out.println(aString); . Standard Deviation Calculator . This program asks for a list of numbers. When you are finished, input 0. It will then report Standard Deviation of this set of numbers. . Note: This program was created to assist with an AP Biology Assignment where we had to calculate the Standard Deviation of a dataset. . public class STDevCalculator { ArrayList&lt;Double&gt; values; //defines where values will go into public STDevCalculator() { this.values = new ArrayList&lt;&gt;(); this.enterValues(); } private boolean isZero(double value){ double threshold = 0.001; return value &gt;= -threshold &amp;&amp; value &lt;= threshold; //tests if the input is 0 } private void enterValues() { Scanner input; while (true) { input = new Scanner(System.in); System.out.print(&quot;Enter a Value, 0 to exit: &quot;); try { double sampleInputDouble = input.nextDouble(); //asks for a double to inputted System.out.println(sampleInputDouble); if (isZero(sampleInputDouble)) break; else this.values.add(sampleInputDouble); } catch (Exception e) { System.out.println(&quot;Not an double (form like 9.99), &quot; + e); //has to be in double form } input.close(); } } public double stdev() { double total = 0; double m = 0; double s = 0; double sum = 0; for (double num : this.values) { //Loops through and finds the sum of all of the values in the values array total += num; } m = total / values.size(); for (double num : this.values){ sum += Math.pow((m - num), 2); //Sums up all of the values necessary in the standard deviation equation } s = Math.pow((sum / (this.values.size() - 1)), 0.5); //Calculates the standard deviation return (s); } public static void main(String[] args) { STDevCalculator values = new STDevCalculator(); System.out.println(&quot;Standard Deviation of dataset: &quot; + String.format(&quot;%.2f&quot;, values.stdev())); } } STDevCalculator.main(null); . Enter a Value, 0 to exit: 5.0 Enter a Value, 0 to exit: 10.0 Enter a Value, 0 to exit: 15.0 Enter a Value, 0 to exit: 20.0 Enter a Value, 0 to exit: 0.0 Standard Deviation of dataset: 6.45 . Standard Deviation is the amount of variation in a dataset and is very vital in many situations regarding data analysis, making this program quite useful. .",
            "url": "https://icygs.github.io/Krish-CSA/biology/2022/08/23/Java-Primitives.html",
            "relUrl": "/biology/2022/08/23/Java-Primitives.html",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Python Jupyter Notebook",
            "content": "Printing &quot;Hello!&quot; using Python . print (&quot;Hello!&quot;) . Hello! . This is a minor markdown change .",
            "url": "https://icygs.github.io/Krish-CSA/jupyter/2022/08/21/Python-Notebook.html",
            "relUrl": "/jupyter/2022/08/21/Python-Notebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "CSA Goals",
            "content": "CSA Goals . Learn how to use Markdown | Learn how to use Java | Code code code | Do good on the AP exam | .",
            "url": "https://icygs.github.io/Krish-CSA/markdown/2022/08/21/Goals-For-CSA.html",
            "relUrl": "/markdown/2022/08/21/Goals-For-CSA.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "A Minor Markdwon",
            "content": "Minor Markdown . Minor markdown . What Am I Doing? . Testing out markdown and learning how to make a file. .",
            "url": "https://icygs.github.io/Krish-CSA/markdown/2022/08/19/minor-markdown.html",
            "relUrl": "/markdown/2022/08/19/minor-markdown.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup$$ . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://icygs.github.io/Krish-CSA/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi! My name is Krish and I am very excited to be code code coding this year! Computer science is quite interesting. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://icygs.github.io/Krish-CSA/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "Notes",
          "content": "This is where my notes for the year are going to go .",
          "url": "https://icygs.github.io/Krish-CSA/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  

  
  

  
      ,"page15": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://icygs.github.io/Krish-CSA/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}